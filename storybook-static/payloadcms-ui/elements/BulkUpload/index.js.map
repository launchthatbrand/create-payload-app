{"version":3,"file":"index.js","names":["c","_c","useModal","validateMimeType","React","toast","useConfig","useTranslation","Drawer","useDrawerDepth","AddFilesView","AddingFilesView","FormsManagerProvider","useFormsManager","drawerSlug","DrawerContent","addFiles","forms","isInitializing","closeModal","collectionSlug","useBulkUpload","getEntityConfig","t","uploadCollection","uploadConfig","upload","uploadMimeTypes","mimeTypes","onDrop","useCallback","acceptedFiles","fileTransfer","DataTransfer","candidateFile","undefined","length","type","items","add","files","error","_jsx","acceptMimeTypes","join","onCancel","BulkUploadDrawer","$","t0","gutter","Header","slug","children","Context","createContext","currentActivePath","initialFiles","maxFiles","onSuccess","setCollectionSlug","setCurrentActivePath","setInitialFiles","setMaxFiles","setOnCancel","setOnSuccess","BulkUploadProvider","collection","setCollection","useState","onSuccessFunctionMap","setOnSuccessFunctionMap","onCancelFunction","setOnCancelFunction","useBulkUploadDrawerSlug","t1","Symbol","for","t2","path","prev","t3","t4","docIDs","errorCount","Object","hasOwn","onSuccessFunction","t5","value","_jsxs","Fragment","use","depth"],"sources":["../../../src/elements/BulkUpload/index.tsx"],"sourcesContent":["'use client'\n\nimport type { JsonObject } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { validateMimeType } from 'payload/shared'\nimport React from 'react'\nimport { toast } from 'sonner'\n\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { Drawer, useDrawerDepth } from '../Drawer/index.js'\nimport { AddFilesView } from './AddFilesView/index.js'\nimport { AddingFilesView } from './AddingFilesView/index.js'\nimport { FormsManagerProvider, useFormsManager } from './FormsManager/index.js'\n\nconst drawerSlug = 'bulk-upload-drawer-slug'\n\nfunction DrawerContent() {\n  const { addFiles, forms, isInitializing } = useFormsManager()\n  const { closeModal } = useModal()\n  const { collectionSlug, drawerSlug } = useBulkUpload()\n  const { getEntityConfig } = useConfig()\n  const { t } = useTranslation()\n\n  const uploadCollection = getEntityConfig({ collectionSlug })\n  const uploadConfig = uploadCollection?.upload\n  const uploadMimeTypes = uploadConfig?.mimeTypes\n\n  const onDrop = React.useCallback(\n    (acceptedFiles: FileList) => {\n      const fileTransfer = new DataTransfer()\n      for (const candidateFile of acceptedFiles) {\n        if (\n          uploadMimeTypes === undefined ||\n          uploadMimeTypes.length === 0 ||\n          validateMimeType(candidateFile.type, uploadMimeTypes)\n        ) {\n          fileTransfer.items.add(candidateFile)\n        }\n      }\n      if (fileTransfer.files.length === 0) {\n        toast.error(t('error:invalidFileType'))\n      } else {\n        void addFiles(fileTransfer.files)\n      }\n    },\n    [addFiles, t, uploadMimeTypes],\n  )\n\n  if (!collectionSlug) {\n    return null\n  }\n\n  if (!forms.length && !isInitializing) {\n    return (\n      <AddFilesView\n        acceptMimeTypes={uploadMimeTypes?.join(', ')}\n        onCancel={() => closeModal(drawerSlug)}\n        onDrop={onDrop}\n      />\n    )\n  } else {\n    return <AddingFilesView />\n  }\n}\n\nexport type BulkUploadProps = {\n  readonly children: React.ReactNode\n}\n\nexport function BulkUploadDrawer() {\n  const { drawerSlug } = useBulkUpload()\n\n  return (\n    <Drawer gutter={false} Header={null} slug={drawerSlug}>\n      <FormsManagerProvider>\n        <DrawerContent />\n      </FormsManagerProvider>\n    </Drawer>\n  )\n}\n\ntype BulkUploadContext = {\n  collectionSlug: string\n  currentActivePath: string\n  drawerSlug: string\n  initialFiles: FileList\n  maxFiles: number\n  onCancel: () => void\n  onSuccess: (newDocs: JsonObject[], errorCount: number) => void\n  setCollectionSlug: (slug: string) => void\n  setCurrentActivePath: (path: string) => void\n  setInitialFiles: (files: FileList) => void\n  setMaxFiles: (maxFiles: number) => void\n  setOnCancel: (onCancel: BulkUploadContext['onCancel']) => void\n  setOnSuccess: (path: string, onSuccess: BulkUploadContext['onSuccess']) => void\n}\n\nconst Context = React.createContext<BulkUploadContext>({\n  collectionSlug: '',\n  currentActivePath: undefined,\n  drawerSlug: '',\n  initialFiles: undefined,\n  maxFiles: undefined,\n  onCancel: () => null,\n  onSuccess: () => null,\n  setCollectionSlug: () => null,\n  setCurrentActivePath: () => null,\n  setInitialFiles: () => null,\n  setMaxFiles: () => null,\n  setOnCancel: () => null,\n  setOnSuccess: () => null,\n})\nexport function BulkUploadProvider({ children }: { readonly children: React.ReactNode }) {\n  const [collection, setCollection] = React.useState<string>()\n  const [onSuccessFunctionMap, setOnSuccessFunctionMap] =\n    React.useState<Record<string, BulkUploadContext['onSuccess']>>()\n  const [onCancelFunction, setOnCancelFunction] = React.useState<BulkUploadContext['onCancel']>()\n  const [initialFiles, setInitialFiles] = React.useState<FileList>(undefined)\n  const [maxFiles, setMaxFiles] = React.useState<number>(undefined)\n  const [currentActivePath, setCurrentActivePath] = React.useState<string>(undefined)\n  const drawerSlug = useBulkUploadDrawerSlug()\n\n  const setCollectionSlug: BulkUploadContext['setCollectionSlug'] = (slug) => {\n    setCollection(slug)\n  }\n\n  const setOnSuccess: BulkUploadContext['setOnSuccess'] = React.useCallback((path, onSuccess) => {\n    setOnSuccessFunctionMap((prev) => ({\n      ...prev,\n      [path]: onSuccess,\n    }))\n  }, [])\n\n  return (\n    <Context\n      value={{\n        collectionSlug: collection,\n        currentActivePath,\n        drawerSlug,\n        initialFiles,\n        maxFiles,\n        onCancel: () => {\n          if (typeof onCancelFunction === 'function') {\n            onCancelFunction()\n          }\n        },\n        onSuccess: (docIDs, errorCount) => {\n          if (onSuccessFunctionMap && Object.hasOwn(onSuccessFunctionMap, currentActivePath)) {\n            const onSuccessFunction = onSuccessFunctionMap[currentActivePath]\n            onSuccessFunction(docIDs, errorCount)\n          }\n        },\n        setCollectionSlug,\n        setCurrentActivePath,\n        setInitialFiles,\n        setMaxFiles,\n        setOnCancel: setOnCancelFunction,\n        setOnSuccess,\n      }}\n    >\n      <React.Fragment>\n        {children}\n        <BulkUploadDrawer />\n      </React.Fragment>\n    </Context>\n  )\n}\n\nexport const useBulkUpload = () => React.use(Context)\n\nexport function useBulkUploadDrawerSlug() {\n  const depth = useDrawerDepth()\n\n  return `${drawerSlug}-${depth || 1}`\n}\n"],"mappings":"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","ignoreList":[]}