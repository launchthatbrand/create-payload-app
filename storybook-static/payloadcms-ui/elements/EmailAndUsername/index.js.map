{"version":3,"file":"index.js","names":["email","username","React","EmailField","TextField","EmailAndUsernameFields","props","className","loginWithUsername","readOnly","t","showEmailField","requireEmail","allowEmailLogin","showUsernameField","Boolean","_jsxs","_jsx","field","name","admin","autoComplete","label","required","path","schemaPath","validate","requireUsername"],"sources":["../../../src/elements/EmailAndUsername/index.tsx"],"sourcesContent":["'use client'\n\nimport type { TFunction } from '@payloadcms/translations'\nimport type { LoginWithUsernameOptions, SanitizedFieldPermissions } from 'payload'\n\nimport { email, username } from 'payload/shared'\nimport React from 'react'\n\nimport { EmailField } from '../../fields/Email/index.js'\nimport { TextField } from '../../fields/Text/index.js'\n\ntype RenderEmailAndUsernameFieldsProps = {\n  className?: string\n  loginWithUsername?: false | LoginWithUsernameOptions\n  operation?: 'create' | 'update'\n  permissions?:\n    | {\n        [fieldName: string]: SanitizedFieldPermissions\n      }\n    | true\n  readOnly: boolean\n  t: TFunction\n}\n\nexport function EmailAndUsernameFields(props: RenderEmailAndUsernameFieldsProps) {\n  const { className, loginWithUsername, readOnly, t } = props\n\n  const showEmailField =\n    !loginWithUsername || loginWithUsername?.requireEmail || loginWithUsername?.allowEmailLogin\n\n  const showUsernameField = Boolean(loginWithUsername)\n\n  return (\n    <div className={className}>\n      {showEmailField ? (\n        <EmailField\n          field={{\n            name: 'email',\n            admin: {\n              autoComplete: 'off',\n            },\n            label: t('general:email'),\n            required: !loginWithUsername || (loginWithUsername && loginWithUsername.requireEmail),\n          }}\n          path=\"email\"\n          readOnly={readOnly}\n          schemaPath=\"email\"\n          validate={email}\n        />\n      ) : null}\n      {showUsernameField && (\n        <TextField\n          field={{\n            name: 'username',\n            label: t('authentication:username'),\n            required: loginWithUsername && loginWithUsername.requireUsername,\n          }}\n          path=\"username\"\n          readOnly={readOnly}\n          schemaPath=\"username\"\n          validate={username}\n        />\n      )}\n    </div>\n  )\n}\n"],"mappings":"AAAA;;;AAKA,SAASA,KAAK,EAAEC,QAAQ,QAAQ;AAChC,OAAOC,KAAA,MAAW;AAElB,SAASC,UAAU,QAAQ;AAC3B,SAASC,SAAS,QAAQ;AAe1B,OAAO,SAASC,uBAAuBC,KAAwC;EAC7E,MAAM;IAAEC,SAAS;IAAEC,iBAAiB;IAAEC,QAAQ;IAAEC;EAAC,CAAE,GAAGJ,KAAA;EAEtD,MAAMK,cAAA,GACJ,CAACH,iBAAA,IAAqBA,iBAAA,EAAmBI,YAAA,IAAgBJ,iBAAA,EAAmBK,eAAA;EAE9E,MAAMC,iBAAA,GAAoBC,OAAA,CAAQP,iBAAA;EAElC,oBACEQ,KAAA,CAAC;IAAIT,SAAA,EAAWA,SAAA;eACbI,cAAA,gBACCM,IAAA,CAACd,UAAA;MACCe,KAAA,EAAO;QACLC,IAAA,EAAM;QACNC,KAAA,EAAO;UACLC,YAAA,EAAc;QAChB;QACAC,KAAA,EAAOZ,CAAA,CAAE;QACTa,QAAA,EAAU,CAACf,iBAAA,IAAsBA,iBAAA,IAAqBA,iBAAA,CAAkBI;MAC1E;MACAY,IAAA,EAAK;MACLf,QAAA,EAAUA,QAAA;MACVgB,UAAA,EAAW;MACXC,QAAA,EAAU1B;SAEV,MACHc,iBAAA,iBACCG,IAAA,CAACb,SAAA;MACCc,KAAA,EAAO;QACLC,IAAA,EAAM;QACNG,KAAA,EAAOZ,CAAA,CAAE;QACTa,QAAA,EAAUf,iBAAA,IAAqBA,iBAAA,CAAkBmB;MACnD;MACAH,IAAA,EAAK;MACLf,QAAA,EAAUA,QAAA;MACVgB,UAAA,EAAW;MACXC,QAAA,EAAUzB;;;AAKpB","ignoreList":[]}