{"version":3,"file":"index.js","names":["c","_c","useModal","React","useCallback","toast","useForm","useConfig","useDocumentInfo","useLocale","useTranslation","requests","Button","ConfirmationModal","baseClass","Status","$","id","collectionSlug","docPermissions","globalSlug","hasPublishedDoc","incrementVersionCount","setHasPublishedDoc","setMostRecentVersionIsAutosaved","setUnpublishedVersionCount","unpublishedVersionCount","toggleModal","config","t0","routes","t1","serverURL","api","reset","resetForm","code","locale","i18n","t","unPublishModalSlug","revertModalSlug","statusToRender","t2","language","action","url","method","body","publishedDoc","get","headers","then","_temp","res_0","JSON","stringify","res","status","data","json","result","doc","success","message","error","performAction","canUpdate","update","t3","t4","t5","_jsxs","Fragment","children","_jsx","buttonStyle","className","onClick","confirmingLabel","heading","modalSlug","onConfirm","t6","title"],"sources":["../../../src/elements/Status/index.tsx"],"sourcesContent":["'use client'\nimport { useModal } from '@faceless-ui/modal'\nimport React, { useCallback } from 'react'\nimport { toast } from 'sonner'\n\nimport { useForm } from '../../forms/Form/context.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { Button } from '../Button/index.js'\nimport { ConfirmationModal } from '../ConfirmationModal/index.js'\nimport './index.scss'\n\nconst baseClass = 'status'\n\nexport const Status: React.FC = () => {\n  const {\n    id,\n    collectionSlug,\n    docPermissions,\n    globalSlug,\n    hasPublishedDoc,\n    incrementVersionCount,\n    setHasPublishedDoc,\n    setMostRecentVersionIsAutosaved,\n    setUnpublishedVersionCount,\n    unpublishedVersionCount,\n  } = useDocumentInfo()\n  const { toggleModal } = useModal()\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n  } = useConfig()\n  const { reset: resetForm } = useForm()\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const unPublishModalSlug = `confirm-un-publish-${id}`\n  const revertModalSlug = `confirm-revert-${id}`\n\n  let statusToRender: 'changed' | 'draft' | 'published'\n\n  if (unpublishedVersionCount > 0 && hasPublishedDoc) {\n    statusToRender = 'changed'\n  } else if (!hasPublishedDoc) {\n    statusToRender = 'draft'\n  } else if (hasPublishedDoc && unpublishedVersionCount <= 0) {\n    statusToRender = 'published'\n  }\n\n  const performAction = useCallback(\n    async (action: 'revert' | 'unpublish') => {\n      let url\n      let method\n      let body\n\n      if (action === 'unpublish') {\n        body = {\n          _status: 'draft',\n        }\n      }\n\n      if (collectionSlug) {\n        url = `${serverURL}${api}/${collectionSlug}/${id}?locale=${locale}&fallback-locale=null&depth=0`\n        method = 'patch'\n      }\n\n      if (globalSlug) {\n        url = `${serverURL}${api}/globals/${globalSlug}?locale=${locale}&fallback-locale=null&depth=0`\n        method = 'post'\n      }\n\n      if (action === 'revert') {\n        const publishedDoc = await requests\n          .get(url, {\n            headers: {\n              'Accept-Language': i18n.language,\n              'Content-Type': 'application/json',\n            },\n          })\n          .then((res) => res.json())\n\n        body = publishedDoc\n      }\n\n      const res = await requests[method](url, {\n        body: JSON.stringify(body),\n        headers: {\n          'Accept-Language': i18n.language,\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (res.status === 200) {\n        let data\n        const json = await res.json()\n\n        if (globalSlug) {\n          data = json.result\n        } else if (collectionSlug) {\n          data = json.doc\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        resetForm(data)\n        toast.success(json.message)\n        incrementVersionCount()\n        setMostRecentVersionIsAutosaved(false)\n\n        if (action === 'unpublish') {\n          setHasPublishedDoc(false)\n        } else if (action === 'revert') {\n          setUnpublishedVersionCount(0)\n        }\n      } else {\n        toast.error(t('error:unPublishingDocument'))\n      }\n    },\n    [\n      api,\n      collectionSlug,\n      globalSlug,\n      id,\n      i18n.language,\n      incrementVersionCount,\n      locale,\n      resetForm,\n      serverURL,\n      setUnpublishedVersionCount,\n      setMostRecentVersionIsAutosaved,\n      t,\n      setHasPublishedDoc,\n    ],\n  )\n\n  const canUpdate = docPermissions?.update\n\n  if (statusToRender) {\n    return (\n      <div\n        className={baseClass}\n        title={`${t('version:status')}: ${t(`version:${statusToRender}`)}`}\n      >\n        <div className={`${baseClass}__value-wrap`}>\n          <span className={`${baseClass}__label`}>{t('version:status')}:&nbsp;</span>\n          <span className={`${baseClass}__value`}>{t(`version:${statusToRender}`)}</span>\n          {canUpdate && statusToRender === 'published' && (\n            <React.Fragment>\n              &nbsp;&mdash;&nbsp;\n              <Button\n                buttonStyle=\"none\"\n                className={`${baseClass}__action`}\n                onClick={() => toggleModal(unPublishModalSlug)}\n              >\n                {t('version:unpublish')}\n              </Button>\n              <ConfirmationModal\n                body={t('version:aboutToUnpublish')}\n                confirmingLabel={t('version:unpublishing')}\n                heading={t('version:confirmUnpublish')}\n                modalSlug={unPublishModalSlug}\n                onConfirm={() => performAction('unpublish')}\n              />\n            </React.Fragment>\n          )}\n          {canUpdate && statusToRender === 'changed' && (\n            <React.Fragment>\n              &nbsp;&mdash;&nbsp;\n              <Button\n                buttonStyle=\"none\"\n                className={`${baseClass}__action`}\n                id=\"action-revert-to-published\"\n                onClick={() => toggleModal(revertModalSlug)}\n              >\n                {t('version:revertToPublished')}\n              </Button>\n              <ConfirmationModal\n                body={t('version:aboutToRevertToPublished')}\n                confirmingLabel={t('version:reverting')}\n                heading={t('version:confirmRevertToSaved')}\n                modalSlug={revertModalSlug}\n                onConfirm={() => performAction('revert')}\n              />\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}