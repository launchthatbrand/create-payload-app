{"version":3,"file":"DrawerContent.js","names":["useModal","hoistQueryParamsToAnd","React","useCallback","useEffect","useState","useDocumentDrawer","useEffectEvent","useConfig","useServerFunctions","ListDrawerContextProvider","LoadingOverlay","ListDrawerContent","allowCreate","collectionSlugs","disableQueryPresets","drawerSlug","enableRowSelections","filterOptions","onBulkSelect","onSelect","overrideEntityVisibility","selectedCollection","selectedCollectionFromProps","closeModal","isModalOpen","serverFunction","ListView","setListView","undefined","isLoading","setIsLoading","config","collections","getEntityConfig","isOpen","enabledCollections","filter","slug","includes","selectedOption","setSelectedOption","initialSelection","found","collectionSlug","label","labels","value","DocumentDrawer","DocumentDrawerToggler","documentDrawerSlug","updateSelectedOption","renderList","query","newQuery","where","filterOption","List","ViewResult","name","args","disableBulkDelete","disableBulkEdit","_err","console","error","onCreateNew","doc","docID","id","onQueryChange","setMySelectedOption","incomingSelection","_jsx","_jsxs","createNewDrawerSlug","onSave"],"sources":["../../../src/elements/ListDrawer/DrawerContent.tsx"],"sourcesContent":["'use client'\nimport type { ListQuery } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { hoistQueryParamsToAnd } from 'payload/shared'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport type { ListDrawerProps } from './types.js'\n\nimport { useDocumentDrawer } from '../../elements/DocumentDrawer/index.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { ListDrawerContextProvider } from '../ListDrawer/Provider.js'\nimport { LoadingOverlay } from '../Loading/index.js'\nimport { type Option } from '../ReactSelect/index.js'\n\nexport const ListDrawerContent: React.FC<ListDrawerProps> = ({\n  allowCreate = true,\n  collectionSlugs,\n  disableQueryPresets,\n  drawerSlug,\n  enableRowSelections,\n  filterOptions,\n  onBulkSelect,\n  onSelect,\n  overrideEntityVisibility = true,\n  selectedCollection: selectedCollectionFromProps,\n}) => {\n  const { closeModal, isModalOpen } = useModal()\n\n  const { serverFunction } = useServerFunctions()\n  const [ListView, setListView] = useState<React.ReactNode>(undefined)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const {\n    config: { collections },\n    getEntityConfig,\n  } = useConfig()\n\n  const isOpen = isModalOpen(drawerSlug)\n\n  const enabledCollections = collections.filter(({ slug }) => {\n    return collectionSlugs.includes(slug)\n  })\n\n  const [selectedOption, setSelectedOption] = useState<Option<string>>(() => {\n    const initialSelection = selectedCollectionFromProps || enabledCollections[0]?.slug\n    const found = getEntityConfig({ collectionSlug: initialSelection })\n\n    return found\n      ? {\n          label: found.labels,\n          value: found.slug,\n        }\n      : undefined\n  })\n\n  const [DocumentDrawer, DocumentDrawerToggler, { drawerSlug: documentDrawerSlug }] =\n    useDocumentDrawer({\n      collectionSlug: selectedOption.value,\n    })\n\n  const updateSelectedOption = useEffectEvent((selectedCollectionFromProps: string) => {\n    if (selectedCollectionFromProps && selectedCollectionFromProps !== selectedOption?.value) {\n      setSelectedOption({\n        label: getEntityConfig({ collectionSlug: selectedCollectionFromProps })?.labels,\n        value: selectedCollectionFromProps,\n      })\n    }\n  })\n\n  useEffect(() => {\n    updateSelectedOption(selectedCollectionFromProps)\n  }, [selectedCollectionFromProps])\n\n  const renderList = useCallback(\n    async (slug: string, query?: ListQuery) => {\n      try {\n        const newQuery: ListQuery = { ...(query || {}), where: { ...(query?.where || {}) } }\n\n        const filterOption = filterOptions?.[slug]\n\n        if (filterOptions && typeof filterOption !== 'boolean') {\n          newQuery.where = hoistQueryParamsToAnd(newQuery.where, filterOption)\n        }\n\n        const { List: ViewResult } = (await serverFunction({\n          name: 'render-list',\n          args: {\n            allowCreate,\n            collectionSlug: slug,\n            disableBulkDelete: true,\n            disableBulkEdit: true,\n            disableQueryPresets,\n            drawerSlug,\n            enableRowSelections,\n            overrideEntityVisibility,\n            query: newQuery,\n          },\n        })) as { List: React.ReactNode }\n\n        setListView(ViewResult)\n        setIsLoading(false)\n      } catch (_err) {\n        console.error('Error rendering List View: ', _err) // eslint-disable-line no-console\n\n        if (isOpen) {\n          closeModal(drawerSlug)\n        }\n      }\n    },\n    [\n      serverFunction,\n      closeModal,\n      allowCreate,\n      drawerSlug,\n      isOpen,\n      enableRowSelections,\n      filterOptions,\n      overrideEntityVisibility,\n      disableQueryPresets,\n    ],\n  )\n\n  useEffect(() => {\n    if (!ListView) {\n      void renderList(selectedOption.value)\n    }\n  }, [renderList, ListView, selectedOption.value])\n\n  const onCreateNew = useCallback(\n    ({ doc }) => {\n      if (typeof onSelect === 'function') {\n        onSelect({\n          collectionSlug: selectedOption.value,\n          doc,\n          docID: doc.id,\n        })\n      }\n\n      closeModal(documentDrawerSlug)\n      closeModal(drawerSlug)\n    },\n    [closeModal, documentDrawerSlug, drawerSlug, onSelect, selectedOption.value],\n  )\n\n  const onQueryChange = useCallback(\n    (query: ListQuery) => {\n      void renderList(selectedOption.value, query)\n    },\n    [renderList, selectedOption.value],\n  )\n\n  const setMySelectedOption = useCallback(\n    (incomingSelection: Option<string>) => {\n      setSelectedOption(incomingSelection)\n      void renderList(incomingSelection.value)\n    },\n    [renderList],\n  )\n\n  if (isLoading) {\n    return <LoadingOverlay />\n  }\n\n  return (\n    <ListDrawerContextProvider\n      allowCreate={allowCreate}\n      createNewDrawerSlug={documentDrawerSlug}\n      DocumentDrawerToggler={DocumentDrawerToggler}\n      drawerSlug={drawerSlug}\n      enabledCollections={collectionSlugs}\n      onBulkSelect={onBulkSelect}\n      onQueryChange={onQueryChange}\n      onSelect={onSelect}\n      selectedOption={selectedOption}\n      setSelectedOption={setMySelectedOption}\n    >\n      {ListView}\n      <DocumentDrawer onSave={onCreateNew} />\n    </ListDrawerContextProvider>\n  )\n}\n"],"mappings":"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","ignoreList":[]}