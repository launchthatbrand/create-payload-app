{"version":3,"file":"index.js","names":["c","_c","useModal","getTranslation","useRouter","React","useCallback","toast","CheckboxField","SelectInput","useFormModified","useConfig","useDocumentInfo","useLocale","useRouteTransition","useServerFunctions","useTranslation","DrawerHeader","Button","Drawer","PopupList","baseClass","drawerSlug","CopyLocaleData","$","config","t0","localization","routes","t1","serverURL","admin","code","id","collectionSlug","globalSlug","i18n","t","modified","toggleModal","copyDataFromLocale","router","startRouteTransition","t2","locales","map","_temp","localeOptions","t3","locale_0","locale","value","localeOptionsWithoutCurrent","filter","t4","code_0","locale_1","find","l","label","getLocaleLabel","copying","setCopying","useState","toLocale","setToLocale","fromLocale","setFromLocale","overwriteExisting","setOverwriteExisting","t5","t6","useEffect","t7","t8","from","to","docID","overrideData","push","t9","error","message","copyLocaleData","info","t10","t11","Symbol","for","selectedOption","t12","selectedOption_0","t13","_jsxs","Fragment","children","_jsx","onClick","className","gutter","Header","onClose","title","buttonStyle","disabled","iconPosition","size","name","onChange","options","path","readOnly","checked","field"],"sources":["../../../src/elements/CopyLocaleData/index.tsx"],"sourcesContent":["'use client'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport React, { useCallback } from 'react'\nimport { toast } from 'sonner'\n\nimport { CheckboxField } from '../../fields/Checkbox/index.js'\nimport { SelectInput } from '../../fields/Select/index.js'\nimport { useFormModified } from '../../forms/Form/context.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { DrawerHeader } from '../BulkUpload/Header/index.js'\nimport { Button } from '../Button/index.js'\nimport { Drawer } from '../Drawer/index.js'\nimport { PopupList } from '../Popup/index.js'\nimport './index.scss'\n\nconst baseClass = 'copy-locale-data'\n\nconst drawerSlug = 'copy-locale'\nexport const CopyLocaleData: React.FC = () => {\n  const {\n    config: {\n      localization,\n      routes: { admin },\n      serverURL,\n    },\n  } = useConfig()\n  const { code } = useLocale()\n  const { id, collectionSlug, globalSlug } = useDocumentInfo()\n  const { i18n, t } = useTranslation()\n  const modified = useFormModified()\n  const { toggleModal } = useModal()\n  const { copyDataFromLocale } = useServerFunctions()\n  const router = useRouter()\n  const { startRouteTransition } = useRouteTransition()\n\n  const localeOptions =\n    (localization &&\n      localization.locales.map((locale) => ({ label: locale.label, value: locale.code }))) ||\n    []\n\n  const localeOptionsWithoutCurrent = localeOptions.filter((locale) => locale.value !== code)\n\n  const getLocaleLabel = (code: string) => {\n    const locale = localization && localization.locales.find((l) => l.code === code)\n    return locale && locale.label ? getTranslation(locale.label, i18n) : code\n  }\n\n  const [copying, setCopying] = React.useState(false)\n  const [toLocale, setToLocale] = React.useState<null | string>(null)\n  const [fromLocale, setFromLocale] = React.useState<null | string>(code)\n  const [overwriteExisting, setOverwriteExisting] = React.useState(false)\n\n  React.useEffect(() => {\n    if (fromLocale !== code) {\n      setFromLocale(code)\n    }\n  }, [code, fromLocale])\n\n  const copyLocaleData = useCallback(\n    async ({ from, to }) => {\n      setCopying(true)\n\n      try {\n        await copyDataFromLocale({\n          collectionSlug,\n          docID: id,\n          fromLocale: from,\n          globalSlug,\n          overrideData: overwriteExisting,\n          toLocale: to,\n        })\n\n        setCopying(false)\n\n        startRouteTransition(() =>\n          router.push(\n            `${serverURL}${admin}/${collectionSlug ? `collections/${collectionSlug}/${id}` : `globals/${globalSlug}`}?locale=${to}`,\n          ),\n        )\n\n        toggleModal(drawerSlug)\n      } catch (error) {\n        toast.error(error.message)\n      }\n    },\n    [\n      copyDataFromLocale,\n      collectionSlug,\n      id,\n      globalSlug,\n      overwriteExisting,\n      toggleModal,\n      router,\n      serverURL,\n      admin,\n      startRouteTransition,\n    ],\n  )\n\n  if (!id && !globalSlug) {\n    return null\n  }\n\n  return (\n    <React.Fragment>\n      <PopupList.Button\n        id={`${baseClass}__button`}\n        onClick={() => {\n          if (modified) {\n            toast.info(t('general:unsavedChanges'))\n          } else {\n            toggleModal(drawerSlug)\n          }\n        }}\n      >\n        {t('localization:copyToLocale')}\n      </PopupList.Button>\n      <Drawer\n        className={baseClass}\n        gutter={false}\n        Header={\n          <DrawerHeader\n            onClose={() => {\n              toggleModal(drawerSlug)\n            }}\n            title={t('localization:copyToLocale')}\n          />\n        }\n        slug={drawerSlug}\n      >\n        <div className={`${baseClass}__sub-header`}>\n          <span>\n            {fromLocale && toLocale ? (\n              <div>\n                {t('localization:copyFromTo', {\n                  from: getLocaleLabel(fromLocale),\n                  to: getLocaleLabel(toLocale),\n                })}\n              </div>\n            ) : (\n              t('localization:selectLocaleToCopy')\n            )}\n          </span>\n          <Button\n            buttonStyle=\"primary\"\n            disabled={!fromLocale || !toLocale}\n            iconPosition=\"left\"\n            onClick={async () => {\n              if (fromLocale === toLocale) {\n                toast.error(t('localization:cannotCopySameLocale'))\n                return\n              }\n              if (!copying) {\n                await copyLocaleData({\n                  from: fromLocale,\n                  to: toLocale,\n                })\n              }\n            }}\n            size=\"medium\"\n          >\n            {copying ? t('general:copying') + '...' : t('general:copy')}\n          </Button>\n        </div>\n\n        <div className={`${baseClass}__content`}>\n          <SelectInput\n            label={t('localization:copyFrom')}\n            name={'fromLocale'}\n            onChange={(selectedOption: { value: string }) => {\n              if (selectedOption?.value) {\n                setFromLocale(selectedOption.value)\n              }\n            }}\n            options={localeOptions}\n            path=\"fromLocale\"\n            readOnly\n            value={fromLocale}\n          />\n          <SelectInput\n            label={t('localization:copyTo')}\n            name=\"toLocale\"\n            onChange={(selectedOption: { value: string }) => {\n              if (selectedOption?.value) {\n                setToLocale(selectedOption.value)\n              }\n            }}\n            options={localeOptionsWithoutCurrent}\n            path=\"toLocale\"\n            value={toLocale}\n          />\n          <CheckboxField\n            checked={overwriteExisting}\n            field={{\n              name: 'overwriteExisting',\n              label: t('general:overwriteExistingData'),\n            }}\n            onChange={() => setOverwriteExisting(!overwriteExisting)}\n            path={'overwriteExisting'}\n          />\n        </div>\n      </Drawer>\n    </React.Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}