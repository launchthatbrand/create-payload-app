{"version":3,"file":"index.js","names":["dequal","reduceFieldsToValues","versionDefaults","React","useDeferredValue","useEffect","useRef","useState","toast","useAllFormFields","useForm","useFormModified","useFormProcessing","useFormSubmitted","useDebounce","useEffectEvent","useConfig","useDocumentEvents","useDocumentInfo","useLocale","useTranslation","formatTimeToNow","reduceFieldsToValuesWithValidation","LeaveWithoutSaving","baseClass","minimumAnimationTime","Autosave","id","collection","global","globalDoc","config","routes","api","serverURL","docConfig","incrementVersionCount","lastUpdateTime","mostRecentVersionIsAutosaved","setLastUpdateTime","setMostRecentVersionIsAutosaved","setUnpublishedVersionCount","updateSavedDocumentData","queueRef","isProcessingRef","reportUpdate","dispatchFields","isValid","setBackgroundProcessing","setIsValid","setSubmitted","isFormProcessing","fields","modified","submitted","code","locale","i18n","t","versionsConfig","versions","interval","autosaveInterval","drafts","autosave","validateOnDraft","Boolean","validate","_saving","setSaving","saving","debouncedFields","fieldRef","modifiedRef","localeRef","isValidRef","current","processQueue","useCallback","length","latestAction","autosaveTimeoutRef","handleAutosave","undefined","startTimestamp","endTimestamp","hideIndicator","setTimeout","stopAutoSaveIndicator","Date","getTime","url","method","entitySlug","slug","data","valid","_status","skipSubmission","res","fetch","body","JSON","stringify","credentials","headers","language","error","newDate","status","updatedAt","toISOString","prev","json","errors","Array","isArray","fieldErrors","nonFieldErrors","reduce","fieldErrs","nonFieldErrs","err","newFieldErrs","newNonFieldErrs","message","push","forEach","dataError","field","type","document","doc","result","didMount","previousDebouncedFieldValues","debouncedFieldValues","clearTimeout","_jsxs","className","_jsx","Fragment","distance","date"],"sources":["../../../src/elements/Autosave/index.tsx"],"sourcesContent":["'use client'\n// TODO: abstract the `next/navigation` dependency out from this component\nimport type { ClientCollectionConfig, ClientGlobalConfig } from 'payload'\n\nimport { dequal } from 'dequal/lite'\nimport { reduceFieldsToValues, versionDefaults } from 'payload/shared'\nimport React, { useDeferredValue, useEffect, useRef, useState } from 'react'\nimport { toast } from 'sonner'\n\nimport {\n  useAllFormFields,\n  useForm,\n  useFormModified,\n  useFormProcessing,\n  useFormSubmitted,\n} from '../../forms/Form/context.js'\nimport { useDebounce } from '../../hooks/useDebounce.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentEvents } from '../../providers/DocumentEvents/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport './index.scss'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { formatTimeToNow } from '../../utilities/formatDocTitle/formatDateTitle.js'\nimport { reduceFieldsToValuesWithValidation } from '../../utilities/reduceFieldsToValuesWithValidation.js'\nimport { LeaveWithoutSaving } from '../LeaveWithoutSaving/index.js'\n\nconst baseClass = 'autosave'\n// The minimum time the saving state should be shown\nconst minimumAnimationTime = 1000\n\nexport type Props = {\n  collection?: ClientCollectionConfig\n  global?: ClientGlobalConfig\n  id?: number | string\n  publishedDocUpdatedAt: string\n}\n\nexport const Autosave: React.FC<Props> = ({ id, collection, global: globalDoc }) => {\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n  } = useConfig()\n  const {\n    docConfig,\n    incrementVersionCount,\n    lastUpdateTime,\n    mostRecentVersionIsAutosaved,\n    setLastUpdateTime,\n    setMostRecentVersionIsAutosaved,\n    setUnpublishedVersionCount,\n    updateSavedDocumentData,\n  } = useDocumentInfo()\n  const queueRef = useRef([])\n  const isProcessingRef = useRef(false)\n\n  const { reportUpdate } = useDocumentEvents()\n  const { dispatchFields, isValid, setBackgroundProcessing, setIsValid, setSubmitted } = useForm()\n  const isFormProcessing = useFormProcessing()\n\n  const [fields] = useAllFormFields()\n  const modified = useFormModified()\n  const submitted = useFormSubmitted()\n\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const versionsConfig = docConfig?.versions\n  let interval = versionDefaults.autosaveInterval\n\n  if (versionsConfig.drafts && versionsConfig.drafts.autosave) {\n    interval = versionsConfig.drafts.autosave.interval\n  }\n\n  const validateOnDraft = Boolean(\n    docConfig?.versions?.drafts && docConfig?.versions?.drafts.validate,\n  )\n\n  const [_saving, setSaving] = useState(false)\n  const saving = useDeferredValue(_saving)\n  const debouncedFields = useDebounce(fields, interval)\n  const fieldRef = useRef(fields)\n  const modifiedRef = useRef(modified)\n  const localeRef = useRef(locale)\n  /**\n   * Track the validation internally so Autosave can determine when to run queue processing again\n   * Helps us prevent infinite loops when the queue is processing and the form is invalid\n   */\n  const isValidRef = useRef(isValid)\n\n  // Store fields in ref so the autosave func\n  // can always retrieve the most to date copies\n  // after the timeout has executed\n  fieldRef.current = fields\n\n  // Store modified in ref so the autosave func\n  // can bail out if modified becomes false while\n  // timing out during autosave\n  modifiedRef.current = modified\n\n  // Store locale in ref so the autosave func\n  // can always retrieve the most to date locale\n  localeRef.current = locale\n\n  const processQueue = React.useCallback(async () => {\n    if (isProcessingRef.current || queueRef.current.length === 0) {\n      return\n    }\n\n    // Do not autosave if the form is already processing (e.g. if the user clicked the publish button\n    // right before this autosave runs), as parallel updates could cause conflicts\n    if (isFormProcessing) {\n      queueRef.current = []\n      return\n    }\n\n    if (!isValidRef.current) {\n      // Clear queue so we don't end up in an infinite loop\n      queueRef.current = []\n      // Reset internal validation state so queue processing can run again\n      isValidRef.current = true\n      return\n    }\n    isProcessingRef.current = true\n\n    const latestAction = queueRef.current[queueRef.current.length - 1]\n    queueRef.current = []\n\n    setBackgroundProcessing(true)\n    try {\n      await latestAction()\n    } finally {\n      isProcessingRef.current = false\n      setBackgroundProcessing(false)\n      if (queueRef.current.length > 0) {\n        await processQueue()\n      }\n    }\n    setBackgroundProcessing(false)\n  }, [isFormProcessing, setBackgroundProcessing])\n\n  const autosaveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  const handleAutosave = useEffectEvent(() => {\n    autosaveTimeoutRef.current = undefined\n    // We need to log the time in order to figure out if we need to trigger the state off later\n    let startTimestamp = undefined\n    let endTimestamp = undefined\n\n    const hideIndicator = () => {\n      // If request was faster than minimum animation time, animate the difference\n      if (endTimestamp - startTimestamp < minimumAnimationTime) {\n        autosaveTimeoutRef.current = setTimeout(\n          () => {\n            setSaving(false)\n          },\n          minimumAnimationTime - (endTimestamp - startTimestamp),\n        )\n      } else {\n        stopAutoSaveIndicator()\n      }\n    }\n\n    const autosave = async () => {\n      if (modified) {\n        startTimestamp = new Date().getTime()\n\n        setSaving(true)\n\n        let url: string\n        let method: string\n        let entitySlug: string\n\n        if (collection && id) {\n          entitySlug = collection.slug\n          url = `${serverURL}${api}/${entitySlug}/${id}?draft=true&autosave=true&locale=${localeRef.current}`\n          method = 'PATCH'\n        }\n\n        if (globalDoc) {\n          entitySlug = globalDoc.slug\n          url = `${serverURL}${api}/globals/${entitySlug}?draft=true&autosave=true&locale=${localeRef.current}`\n          method = 'POST'\n        }\n\n        if (url) {\n          if (modifiedRef.current) {\n            const { data, valid } = reduceFieldsToValuesWithValidation(fieldRef.current, true)\n\n            data._status = 'draft'\n\n            const skipSubmission =\n              submitted && !valid && versionsConfig?.drafts && versionsConfig?.drafts?.validate\n\n            if (!skipSubmission && isValidRef.current) {\n              let res\n              try {\n                res = await fetch(url, {\n                  body: JSON.stringify(data),\n                  credentials: 'include',\n                  headers: {\n                    'Accept-Language': i18n.language,\n                    'Content-Type': 'application/json',\n                  },\n                  method,\n                })\n              } catch (error) {\n                // Swallow Error\n              }\n\n              const newDate = new Date()\n              // We need to log the time in order to figure out if we need to trigger the state off later\n              endTimestamp = newDate.getTime()\n\n              if (res.status === 200) {\n                setLastUpdateTime(newDate.getTime())\n\n                reportUpdate({\n                  id,\n                  entitySlug,\n                  updatedAt: newDate.toISOString(),\n                })\n\n                if (!mostRecentVersionIsAutosaved) {\n                  incrementVersionCount()\n                  setMostRecentVersionIsAutosaved(true)\n                  setUnpublishedVersionCount((prev) => prev + 1)\n                }\n              }\n              const json = await res.json()\n\n              if (versionsConfig?.drafts && versionsConfig?.drafts?.validate && json?.errors) {\n                if (Array.isArray(json.errors)) {\n                  const [fieldErrors, nonFieldErrors] = json.errors.reduce(\n                    ([fieldErrs, nonFieldErrs], err) => {\n                      const newFieldErrs = []\n                      const newNonFieldErrs = []\n\n                      if (err?.message) {\n                        newNonFieldErrs.push(err)\n                      }\n\n                      if (Array.isArray(err?.data)) {\n                        err.data.forEach((dataError) => {\n                          if (dataError?.field) {\n                            newFieldErrs.push(dataError)\n                          } else {\n                            newNonFieldErrs.push(dataError)\n                          }\n                        })\n                      }\n\n                      return [\n                        [...fieldErrs, ...newFieldErrs],\n                        [...nonFieldErrs, ...newNonFieldErrs],\n                      ]\n                    },\n                    [[], []],\n                  )\n\n                  dispatchFields({\n                    type: 'ADD_SERVER_ERRORS',\n                    errors: fieldErrors,\n                  })\n\n                  nonFieldErrors.forEach((err) => {\n                    toast.error(err.message || i18n.t('error:unknown'))\n                  })\n\n                  // Set valid to false internally so the queue doesn't process\n                  isValidRef.current = false\n                  setIsValid(false)\n                  setSubmitted(true)\n                  hideIndicator()\n                  return\n                }\n              } else {\n                // If it's not an error then we can update the document data inside the context\n                const document = json?.doc || json?.result\n\n                // Manually update the data since this function doesn't fire the `submit` function from useForm\n                if (document) {\n                  setIsValid(true)\n\n                  // Reset internal state allowing the queue to process\n                  isValidRef.current = true\n                  updateSavedDocumentData(document)\n                }\n              }\n\n              hideIndicator()\n            }\n          }\n        }\n      }\n    }\n\n    queueRef.current.push(autosave)\n    void processQueue()\n  })\n\n  const didMount = useRef(false)\n  const previousDebouncedFieldValues = useRef(reduceFieldsToValues(debouncedFields))\n  // When debounced fields change, autosave\n  useEffect(() => {\n    /**\n     * Ensure autosave doesn't run on mount\n     */\n    if (!didMount.current) {\n      didMount.current = true\n      return\n    }\n\n    /**\n     * Ensure autosave only runs if the form data changes, not every time the entire form state changes\n     */\n    const debouncedFieldValues = reduceFieldsToValues(debouncedFields)\n    if (dequal(debouncedFieldValues, previousDebouncedFieldValues)) {\n      return\n    }\n\n    previousDebouncedFieldValues.current = debouncedFieldValues\n\n    handleAutosave()\n  }, [debouncedFields])\n\n  /**\n   * If component unmounts, clear the autosave timeout\n   */\n  useEffect(() => {\n    return () => {\n      stopAutoSaveIndicator()\n    }\n  }, [])\n\n  const stopAutoSaveIndicator = useEffectEvent(() => {\n    if (autosaveTimeoutRef.current) {\n      clearTimeout(autosaveTimeoutRef.current)\n    }\n\n    setSaving(false)\n  })\n\n  return (\n    <div className={baseClass}>\n      {validateOnDraft && !isValid && <LeaveWithoutSaving />}\n      {saving && t('general:saving')}\n      {!saving && Boolean(lastUpdateTime) && (\n        <React.Fragment>\n          {t('version:lastSavedAgo', {\n            distance: formatTimeToNow({ date: lastUpdateTime, i18n }),\n          })}\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}