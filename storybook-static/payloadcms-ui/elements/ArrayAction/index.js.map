{"version":3,"file":"index.js","names":["c","_c","React","ChevronIcon","CopyIcon","MoreIcon","PlusIcon","XIcon","useTranslation","Popup","PopupList","baseClass","ArrayAction","t0","$","addRow","duplicateRow","hasMaxRows","index","isSortable","moveRow","removeRow","rowCount","t","t1","_jsx","button","buttonClassName","className","horizontalAlign","render","t2","close","_jsxs","ButtonGroup","buttonSize","children","Button","onClick","direction","Fragment"],"sources":["../../../src/elements/ArrayAction/index.tsx"],"sourcesContent":["'use client'\nimport React from 'react'\n\nimport { ChevronIcon } from '../../icons/Chevron/index.js'\nimport { CopyIcon } from '../../icons/Copy/index.js'\nimport { MoreIcon } from '../../icons/More/index.js'\nimport { PlusIcon } from '../../icons/Plus/index.js'\nimport { XIcon } from '../../icons/X/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { Popup, PopupList } from '../Popup/index.js'\nimport './index.scss'\n\nconst baseClass = 'array-actions'\n\nexport type Props = {\n  addRow: (current: number, blockType?: string) => Promise<void> | void\n  duplicateRow: (current: number) => void\n  hasMaxRows: boolean\n  index: number\n  isSortable?: boolean\n  moveRow: (from: number, to: number) => void\n  removeRow: (index: number) => void\n  rowCount: number\n}\n\nexport const ArrayAction: React.FC<Props> = ({\n  addRow,\n  duplicateRow,\n  hasMaxRows,\n  index,\n  isSortable,\n  moveRow,\n  removeRow,\n  rowCount,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Popup\n      button={<MoreIcon />}\n      buttonClassName={`${baseClass}__button`}\n      className={baseClass}\n      horizontalAlign=\"center\"\n      render={({ close }) => {\n        return (\n          <PopupList.ButtonGroup buttonSize=\"small\">\n            {isSortable && index !== 0 && (\n              <PopupList.Button\n                className={`${baseClass}__action ${baseClass}__move-up`}\n                onClick={() => {\n                  moveRow(index, index - 1)\n                  close()\n                }}\n              >\n                <div className={`${baseClass}__action-chevron`}>\n                  <ChevronIcon direction=\"up\" />\n                </div>\n                {t('general:moveUp')}\n              </PopupList.Button>\n            )}\n            {isSortable && index < rowCount - 1 && (\n              <PopupList.Button\n                className={`${baseClass}__action`}\n                onClick={() => {\n                  moveRow(index, index + 1)\n                  close()\n                }}\n              >\n                <div className={`${baseClass}__action-chevron`}>\n                  <ChevronIcon />\n                </div>\n                {t('general:moveDown')}\n              </PopupList.Button>\n            )}\n            {!hasMaxRows && (\n              <React.Fragment>\n                <PopupList.Button\n                  className={`${baseClass}__action ${baseClass}__add`}\n                  onClick={() => {\n                    void addRow(index + 1)\n                    close()\n                  }}\n                >\n                  <PlusIcon />\n                  {t('general:addBelow')}\n                </PopupList.Button>\n                <PopupList.Button\n                  className={`${baseClass}__action ${baseClass}__duplicate`}\n                  onClick={() => {\n                    duplicateRow(index)\n                    close()\n                  }}\n                >\n                  <CopyIcon />\n                  {t('general:duplicate')}\n                </PopupList.Button>\n              </React.Fragment>\n            )}\n            <PopupList.Button\n              className={`${baseClass}__action ${baseClass}__remove`}\n              onClick={() => {\n                removeRow(index)\n                close()\n              }}\n            >\n              <XIcon />\n              {t('general:remove')}\n            </PopupList.Button>\n          </PopupList.ButtonGroup>\n        )\n      }}\n      size=\"medium\"\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}