{"version":3,"file":"types.js","names":[],"sources":["../../../src/providers/DocumentInfo/types.ts"],"sourcesContent":["import type {\n  ClientCollectionConfig,\n  ClientGlobalConfig,\n  ClientUser,\n  Data,\n  DocumentPreferences,\n  FormState,\n  InsideFieldsPreferences,\n  SanitizedCollectionConfig,\n  SanitizedDocumentPermissions,\n  SanitizedGlobalConfig,\n  TypedUser,\n} from 'payload'\nimport type React from 'react'\n\nexport type DocumentInfoProps = {\n  readonly action?: string\n  readonly AfterDocument?: React.ReactNode\n  readonly AfterFields?: React.ReactNode\n  readonly apiURL?: string\n  readonly BeforeFields?: React.ReactNode\n  readonly collectionSlug?: SanitizedCollectionConfig['slug']\n  readonly currentEditor: TypedUser\n  readonly disableActions?: boolean\n  readonly disableCreate?: boolean\n  readonly disableLeaveWithoutSaving?: boolean\n  readonly docPermissions?: SanitizedDocumentPermissions\n  readonly globalSlug?: SanitizedGlobalConfig['slug']\n  readonly hasPublishedDoc: boolean\n  readonly hasPublishPermission?: boolean\n  readonly hasSavePermission?: boolean\n  readonly id?: number | string\n  readonly initialData?: Data\n  readonly initialState?: FormState\n  readonly isEditing?: boolean\n  readonly isLocked: boolean\n  readonly lastUpdateTime: number\n  readonly mostRecentVersionIsAutosaved: boolean\n  readonly redirectAfterCreate?: boolean\n  readonly redirectAfterDelete?: boolean\n  readonly redirectAfterDuplicate?: boolean\n  readonly unpublishedVersionCount: number\n  readonly Upload?: React.ReactNode\n  readonly versionCount: number\n}\n\nexport type DocumentInfoContext = {\n  currentEditor?: ClientUser | null | number | string\n  docConfig?: ClientCollectionConfig | ClientGlobalConfig\n  documentIsLocked?: boolean\n  getDocPermissions: (data?: Data) => Promise<void>\n  getDocPreferences: () => Promise<DocumentPreferences>\n  incrementVersionCount: () => void\n  isInitializing: boolean\n  preferencesKey?: string\n  savedDocumentData?: Data\n  setCurrentEditor?: React.Dispatch<React.SetStateAction<ClientUser>>\n  setDocFieldPreferences: (\n    field: string,\n    fieldPreferences: { [key: string]: unknown } & Partial<InsideFieldsPreferences>,\n  ) => void\n  setDocumentIsLocked?: React.Dispatch<React.SetStateAction<boolean>>\n  setDocumentTitle: (title: string) => void\n  setHasPublishedDoc: React.Dispatch<React.SetStateAction<boolean>>\n  setLastUpdateTime: React.Dispatch<React.SetStateAction<number>>\n  setMostRecentVersionIsAutosaved: React.Dispatch<React.SetStateAction<boolean>>\n  setUnpublishedVersionCount: React.Dispatch<React.SetStateAction<number>>\n  setUploadStatus?: (status: 'failed' | 'idle' | 'uploading') => void\n  title: string\n  unlockDocument: (docID: number | string, slug: string) => Promise<void>\n  unpublishedVersionCount: number\n  updateDocumentEditor: (docID: number | string, slug: string, user: ClientUser) => Promise<void>\n  updateSavedDocumentData: (data: Data) => void\n  uploadStatus?: 'failed' | 'idle' | 'uploading'\n  versionCount: number\n} & DocumentInfoProps\n"],"mappings":"AA8CA","ignoreList":[]}