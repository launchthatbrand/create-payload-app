{"version":3,"file":"buildPolymorphicColumnState.js","names":["MissingEditorProp","fieldIsHiddenOrDisabled","fieldIsID","fieldIsPresentationalOnly","flattenTopLevelFields","React","RenderCustomComponent","RenderDefaultCell","SortColumn","RenderServerComponent","filterFields","buildPolymorphicColumnState","args","beforeRows","columnPreferences","columns","customCellProps","docs","enableRowSelections","fields","i18n","payload","sortColumnProps","useAsTitle","sortedFieldMap","_sortedFieldMap","idFieldIndex","findIndex","field","idField","splice","unshift","useAsTitleFieldIndex","name","useAsTitleField","sortTo","sortFieldMap","fieldMap","sort","a","b","aIndex","column","accessor","bIndex","activeColumnsIndices","sorted","reduce","acc","index","_field","find","f","columnPreference","preference","active","Array","isArray","length","includes","push","CustomLabel","undefined","fieldAffectsDataSubFields","type","Heading","_jsx","disable","Label","label","renderedCells","map","doc","i","isLinkedColumn","collectionSlug","relationTo","value","baseCellClientProps","cellData","rowData","cellClientProps","link","cellServerProps","className","collectionConfig","collections","config","columnIndex","onClick","CustomCell","editor","Error","admin","components","clientProps","Component","CellComponent","importMap","serverProps","CustomCellComponent","Cell","CustomComponent","Fallback"],"sources":["../../../src/providers/TableColumns/buildPolymorphicColumnState.tsx"],"sourcesContent":["// Dirty copy of buildColumnState.tsx with some changes to not break things\n\nimport type { I18nClient } from '@payloadcms/translations'\nimport type {\n  ClientField,\n  Column,\n  DefaultCellComponentProps,\n  DefaultServerCellComponentProps,\n  Field,\n  ListPreferences,\n  PaginatedDocs,\n  Payload,\n  SanitizedCollectionConfig,\n  StaticLabel,\n} from 'payload'\n\nimport { MissingEditorProp } from 'payload'\nimport {\n  fieldIsHiddenOrDisabled,\n  fieldIsID,\n  fieldIsPresentationalOnly,\n  flattenTopLevelFields,\n} from 'payload/shared'\nimport React from 'react'\n\nimport type { SortColumnProps } from '../../elements/SortColumn/index.js'\n\nimport {\n  RenderCustomComponent,\n  RenderDefaultCell,\n  SortColumn,\n  // eslint-disable-next-line payload/no-imports-from-exports-dir\n} from '../../exports/client/index.js'\nimport { RenderServerComponent } from '../../elements/RenderServerComponent/index.js'\nimport { filterFields } from './filterFields.js'\n\ntype Args = {\n  beforeRows?: Column[]\n  columnPreferences: ListPreferences['columns']\n  columns?: ListPreferences['columns']\n  customCellProps: DefaultCellComponentProps['customCellProps']\n  docs: PaginatedDocs['docs']\n  enableRowSelections: boolean\n  enableRowTypes?: boolean\n  fields: ClientField[]\n  i18n: I18nClient\n  payload: Payload\n  sortColumnProps?: Partial<SortColumnProps>\n  useAsTitle: SanitizedCollectionConfig['admin']['useAsTitle']\n}\n\nexport const buildPolymorphicColumnState = (args: Args): Column[] => {\n  const {\n    beforeRows,\n    columnPreferences,\n    columns,\n    customCellProps,\n    docs,\n    enableRowSelections,\n    fields,\n    i18n,\n    payload,\n    sortColumnProps,\n    useAsTitle,\n  } = args\n\n  // clientFields contains the fake `id` column\n  let sortedFieldMap = flattenTopLevelFields(filterFields(fields), true) as ClientField[]\n\n  let _sortedFieldMap = flattenTopLevelFields(filterFields(fields), true) as Field[] // TODO: think of a way to avoid this additional flatten\n\n  // place the `ID` field first, if it exists\n  // do the same for the `useAsTitle` field with precedence over the `ID` field\n  // then sort the rest of the fields based on the `defaultColumns` or `columnPreferences`\n  const idFieldIndex = sortedFieldMap?.findIndex((field) => fieldIsID(field))\n\n  if (idFieldIndex > -1) {\n    const idField = sortedFieldMap.splice(idFieldIndex, 1)[0]\n    sortedFieldMap.unshift(idField)\n  }\n\n  const useAsTitleFieldIndex = useAsTitle\n    ? sortedFieldMap.findIndex((field) => 'name' in field && field.name === useAsTitle)\n    : -1\n\n  if (useAsTitleFieldIndex > -1) {\n    const useAsTitleField = sortedFieldMap.splice(useAsTitleFieldIndex, 1)[0]\n    sortedFieldMap.unshift(useAsTitleField)\n  }\n\n  const sortTo = columnPreferences || columns\n\n  const sortFieldMap = (fieldMap, sortTo) =>\n    fieldMap?.sort((a, b) => {\n      const aIndex = sortTo.findIndex((column) => 'name' in a && column.accessor === a.name)\n      const bIndex = sortTo.findIndex((column) => 'name' in b && column.accessor === b.name)\n\n      if (aIndex === -1 && bIndex === -1) {\n        return 0\n      }\n\n      if (aIndex === -1) {\n        return 1\n      }\n\n      if (bIndex === -1) {\n        return -1\n      }\n\n      return aIndex - bIndex\n    })\n\n  if (sortTo) {\n    // sort the fields to the order of `defaultColumns` or `columnPreferences`\n    sortedFieldMap = sortFieldMap(sortedFieldMap, sortTo)\n    _sortedFieldMap = sortFieldMap(_sortedFieldMap, sortTo) // TODO: think of a way to avoid this additional sort\n  }\n\n  const activeColumnsIndices = []\n\n  const sorted: Column[] = sortedFieldMap?.reduce((acc, field, index) => {\n    if (fieldIsHiddenOrDisabled(field) && !fieldIsID(field)) {\n      return acc\n    }\n\n    const _field = _sortedFieldMap.find(\n      (f) => 'name' in field && 'name' in f && f.name === field.name,\n    )\n\n    const columnPreference = columnPreferences?.find(\n      (preference) => field && 'name' in field && preference.accessor === field.name,\n    )\n\n    let active = false\n\n    if (columnPreference) {\n      active = columnPreference.active\n    } else if (columns && Array.isArray(columns) && columns.length > 0) {\n      active = columns.find(\n        (column) => field && 'name' in field && column.accessor === field.name,\n      )?.active\n    } else if (activeColumnsIndices.length < 4) {\n      active = true\n    }\n\n    if (active && !activeColumnsIndices.includes(index)) {\n      activeColumnsIndices.push(index)\n    }\n\n    // const CustomLabelToRender =\n    //   _field &&\n    //   'admin' in _field &&\n    //   'components' in _field.admin &&\n    //   'Label' in _field.admin.components &&\n    //   _field.admin.components.Label !== undefined // let it return `null`\n    //     ? _field.admin.components.Label\n    //     : undefined\n\n    // // TODO: customComponent will be optional in v4\n    // const clientProps: Omit<ClientComponentProps, 'customComponents'> = {\n    //   field,\n    // }\n\n    // const customLabelServerProps: Pick<\n    //   ServerComponentProps,\n    //   'clientField' | 'collectionSlug' | 'field' | 'i18n' | 'payload'\n    // > = {\n    //   clientField: field,\n    //   collectionSlug: collectionConfig.slug,\n    //   field: _field,\n    //   i18n,\n    //   payload,\n    // }\n\n    const CustomLabel = undefined\n\n    const fieldAffectsDataSubFields =\n      field &&\n      field.type &&\n      (field.type === 'array' || field.type === 'group' || field.type === 'blocks')\n\n    const Heading = (\n      <SortColumn\n        disable={fieldAffectsDataSubFields || fieldIsPresentationalOnly(field) || undefined}\n        Label={CustomLabel}\n        label={field && 'label' in field ? (field.label as StaticLabel) : undefined}\n        name={'name' in field ? field.name : undefined}\n        {...(sortColumnProps || {})}\n      />\n    )\n\n    const column: Column = {\n      accessor: 'name' in field ? field.name : undefined,\n      active,\n      CustomLabel,\n      field,\n      Heading,\n      renderedCells: active\n        ? docs.map((doc, i) => {\n            const isLinkedColumn = index === activeColumnsIndices[0]\n\n            const collectionSlug = doc.relationTo\n            doc = doc.value\n\n            const baseCellClientProps: DefaultCellComponentProps = {\n              cellData: undefined,\n              collectionSlug,\n              customCellProps,\n              field,\n              rowData: undefined,\n            }\n\n            const cellClientProps: DefaultCellComponentProps = {\n              ...baseCellClientProps,\n              cellData: 'name' in field ? doc[field.name] : undefined,\n              link: isLinkedColumn,\n              rowData: doc,\n            }\n\n            const cellServerProps: DefaultServerCellComponentProps = {\n              cellData: cellClientProps.cellData,\n              className: baseCellClientProps.className,\n              collectionConfig: payload.collections[collectionSlug].config,\n              collectionSlug,\n              columnIndex: baseCellClientProps.columnIndex,\n              customCellProps: baseCellClientProps.customCellProps,\n              field: _field,\n              i18n,\n              link: cellClientProps.link,\n              onClick: baseCellClientProps.onClick,\n              payload,\n              rowData: doc,\n            }\n\n            let CustomCell = null\n\n            if (_field?.type === 'richText') {\n              if (!_field?.editor) {\n                throw new MissingEditorProp(_field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n              }\n\n              if (typeof _field?.editor === 'function') {\n                throw new Error('Attempted to access unsanitized rich text editor.')\n              }\n\n              if (!_field.admin) {\n                _field.admin = {}\n              }\n\n              if (!_field.admin.components) {\n                _field.admin.components = {}\n              }\n\n              CustomCell = RenderServerComponent({\n                clientProps: cellClientProps,\n                Component: _field.editor.CellComponent,\n                importMap: payload.importMap,\n                serverProps: cellServerProps,\n              })\n            } else {\n              const CustomCellComponent = _field?.admin?.components?.Cell\n\n              if (CustomCellComponent) {\n                CustomCell = RenderServerComponent({\n                  clientProps: cellClientProps,\n                  Component: CustomCellComponent,\n                  importMap: payload.importMap,\n                  serverProps: cellServerProps,\n                })\n              } else {\n                CustomCell = undefined\n              }\n            }\n\n            return (\n              <RenderCustomComponent\n                CustomComponent={CustomCell}\n                Fallback={\n                  <RenderDefaultCell\n                    clientProps={cellClientProps}\n                    columnIndex={index}\n                    enableRowSelections={enableRowSelections}\n                    isLinkedColumn={isLinkedColumn}\n                  />\n                }\n                key={`${i}-${index}`}\n              />\n            )\n          })\n        : [],\n    }\n\n    acc.push(column)\n\n    return acc\n  }, [])\n\n  if (beforeRows) {\n    sorted.unshift(...beforeRows)\n  }\n\n  return sorted\n}\n"],"mappings":"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","ignoreList":[]}