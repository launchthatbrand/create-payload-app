{"version":3,"file":"buildColumnState.js","names":["MissingEditorProp","fieldIsHiddenOrDisabled","fieldIsID","fieldIsPresentationalOnly","flattenTopLevelFields","React","RenderServerComponent","DefaultCell","RenderCustomComponent","RenderDefaultCell","SortColumn","hasOptionLabelJSXElement","filterFields","buildColumnState","args","beforeRows","clientCollectionConfig","collectionConfig","columnPreferences","columns","customCellProps","docs","enableRowSelections","i18n","payload","sortColumnProps","useAsTitle","sortedFieldMap","fields","_sortedFieldMap","idFieldIndex","findIndex","field","idField","splice","unshift","useAsTitleFieldIndex","name","useAsTitleField","sortTo","sortFieldMap","fieldMap","sort","a","b","aIndex","column","accessor","bIndex","activeColumnsIndices","sorted","reduce","acc","index","_field","find","f","columnPreference","preference","active","Array","isArray","length","includes","push","CustomLabelToRender","admin","components","Label","undefined","clientProps","customLabelServerProps","clientField","collectionSlug","slug","CustomLabel","Component","importMap","serverProps","fieldAffectsDataSubFields","type","Heading","_jsx","disable","label","baseCellClientProps","cellData","rowData","renderedCells","map","doc","i","isLinkedColumn","cellClientProps","link","cellServerProps","className","columnIndex","onClick","CustomCell","editor","Error","CellComponent","CustomCellComponent","Cell","CustomComponent","Fallback"],"sources":["../../../src/providers/TableColumns/buildColumnState.tsx"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type {\n  ClientCollectionConfig,\n  ClientComponentProps,\n  ClientField,\n  Column,\n  DefaultCellComponentProps,\n  DefaultServerCellComponentProps,\n  Field,\n  ListPreferences,\n  PaginatedDocs,\n  Payload,\n  SanitizedCollectionConfig,\n  ServerComponentProps,\n  StaticLabel,\n} from 'payload'\n\nimport { MissingEditorProp } from 'payload'\nimport {\n  fieldIsHiddenOrDisabled,\n  fieldIsID,\n  fieldIsPresentationalOnly,\n  flattenTopLevelFields,\n} from 'payload/shared'\nimport React from 'react'\n\nimport type { SortColumnProps } from '../../elements/SortColumn/index.js'\n\nimport { RenderServerComponent } from '../../elements/RenderServerComponent/index.js'\nimport {\n  DefaultCell,\n  RenderCustomComponent,\n  RenderDefaultCell,\n  SortColumn,\n  // eslint-disable-next-line payload/no-imports-from-exports-dir\n} from '../../exports/client/index.js'\nimport { hasOptionLabelJSXElement } from '../../utilities/hasOptionLabelJSXElement.js'\nimport { filterFields } from './filterFields.js'\n\ntype Args = {\n  beforeRows?: Column[]\n  clientCollectionConfig: ClientCollectionConfig\n  collectionConfig: SanitizedCollectionConfig\n  columnPreferences: ListPreferences['columns']\n  columns?: ListPreferences['columns']\n  customCellProps: DefaultCellComponentProps['customCellProps']\n  docs: PaginatedDocs['docs']\n  enableRowSelections: boolean\n  enableRowTypes?: boolean\n  i18n: I18nClient\n  payload: Payload\n  sortColumnProps?: Partial<SortColumnProps>\n  useAsTitle: SanitizedCollectionConfig['admin']['useAsTitle']\n}\n\nexport const buildColumnState = (args: Args): Column[] => {\n  const {\n    beforeRows,\n    clientCollectionConfig,\n    collectionConfig,\n    columnPreferences,\n    columns,\n    customCellProps,\n    docs,\n    enableRowSelections,\n    i18n,\n    payload,\n    sortColumnProps,\n    useAsTitle,\n  } = args\n\n  // clientFields contains the fake `id` column\n  let sortedFieldMap = flattenTopLevelFields(\n    filterFields(clientCollectionConfig.fields),\n    true,\n  ) as ClientField[]\n\n  let _sortedFieldMap = flattenTopLevelFields(\n    filterFields(collectionConfig.fields),\n    true,\n  ) as Field[] // TODO: think of a way to avoid this additional flatten\n\n  // place the `ID` field first, if it exists\n  // do the same for the `useAsTitle` field with precedence over the `ID` field\n  // then sort the rest of the fields based on the `defaultColumns` or `columnPreferences`\n  const idFieldIndex = sortedFieldMap?.findIndex((field) => fieldIsID(field))\n\n  if (idFieldIndex > -1) {\n    const idField = sortedFieldMap.splice(idFieldIndex, 1)[0]\n    sortedFieldMap.unshift(idField)\n  }\n\n  const useAsTitleFieldIndex = useAsTitle\n    ? sortedFieldMap.findIndex((field) => 'name' in field && field.name === useAsTitle)\n    : -1\n\n  if (useAsTitleFieldIndex > -1) {\n    const useAsTitleField = sortedFieldMap.splice(useAsTitleFieldIndex, 1)[0]\n    sortedFieldMap.unshift(useAsTitleField)\n  }\n\n  const sortTo = columnPreferences || columns\n\n  const sortFieldMap = (fieldMap, sortTo) =>\n    fieldMap?.sort((a, b) => {\n      const aIndex = sortTo.findIndex((column) => 'name' in a && column.accessor === a.name)\n      const bIndex = sortTo.findIndex((column) => 'name' in b && column.accessor === b.name)\n\n      if (aIndex === -1 && bIndex === -1) {\n        return 0\n      }\n\n      if (aIndex === -1) {\n        return 1\n      }\n\n      if (bIndex === -1) {\n        return -1\n      }\n\n      return aIndex - bIndex\n    })\n\n  if (sortTo) {\n    // sort the fields to the order of `defaultColumns` or `columnPreferences`\n    sortedFieldMap = sortFieldMap(sortedFieldMap, sortTo)\n    _sortedFieldMap = sortFieldMap(_sortedFieldMap, sortTo) // TODO: think of a way to avoid this additional sort\n  }\n\n  const activeColumnsIndices = []\n\n  const sorted: Column[] = sortedFieldMap?.reduce((acc, field, index) => {\n    if (fieldIsHiddenOrDisabled(field) && !fieldIsID(field)) {\n      return acc\n    }\n\n    const _field = _sortedFieldMap.find(\n      (f) => 'name' in field && 'name' in f && f.name === field.name,\n    )\n\n    const columnPreference = columnPreferences?.find(\n      (preference) => field && 'name' in field && preference.accessor === field.name,\n    )\n\n    let active = false\n\n    if (columnPreference) {\n      active = columnPreference.active\n    } else if (columns && Array.isArray(columns) && columns.length > 0) {\n      active = columns.find(\n        (column) => field && 'name' in field && column.accessor === field.name,\n      )?.active\n    } else if (activeColumnsIndices.length < 4) {\n      active = true\n    }\n\n    if (active && !activeColumnsIndices.includes(index)) {\n      activeColumnsIndices.push(index)\n    }\n\n    const CustomLabelToRender =\n      _field &&\n      'admin' in _field &&\n      'components' in _field.admin &&\n      'Label' in _field.admin.components &&\n      _field.admin.components.Label !== undefined // let it return `null`\n        ? _field.admin.components.Label\n        : undefined\n\n    // TODO: customComponent will be optional in v4\n    const clientProps: Omit<ClientComponentProps, 'customComponents'> = {\n      field,\n    }\n\n    const customLabelServerProps: Pick<\n      ServerComponentProps,\n      'clientField' | 'collectionSlug' | 'field' | 'i18n' | 'payload'\n    > = {\n      clientField: field,\n      collectionSlug: collectionConfig.slug,\n      field: _field,\n      i18n,\n      payload,\n    }\n\n    const CustomLabel = CustomLabelToRender\n      ? RenderServerComponent({\n          clientProps,\n          Component: CustomLabelToRender,\n          importMap: payload.importMap,\n          serverProps: customLabelServerProps,\n        })\n      : undefined\n\n    const fieldAffectsDataSubFields =\n      field &&\n      field.type &&\n      (field.type === 'array' || field.type === 'group' || field.type === 'blocks')\n\n    const Heading = (\n      <SortColumn\n        disable={fieldAffectsDataSubFields || fieldIsPresentationalOnly(field) || undefined}\n        Label={CustomLabel}\n        label={field && 'label' in field ? (field.label as StaticLabel) : undefined}\n        name={'name' in field ? field.name : undefined}\n        {...(sortColumnProps || {})}\n      />\n    )\n\n    const baseCellClientProps: DefaultCellComponentProps = {\n      cellData: undefined,\n      collectionSlug: clientCollectionConfig.slug,\n      customCellProps,\n      field,\n      rowData: undefined,\n    }\n\n    const column: Column = {\n      accessor: 'name' in field ? field.name : undefined,\n      active,\n      CustomLabel,\n      field,\n      Heading,\n      renderedCells: active\n        ? docs.map((doc, i) => {\n            const isLinkedColumn = index === activeColumnsIndices[0]\n\n            const cellClientProps: DefaultCellComponentProps = {\n              ...baseCellClientProps,\n              cellData: 'name' in field ? doc[field.name] : undefined,\n              link: isLinkedColumn,\n              rowData: doc,\n            }\n\n            const cellServerProps: DefaultServerCellComponentProps = {\n              cellData: cellClientProps.cellData,\n              className: baseCellClientProps.className,\n              collectionConfig,\n              collectionSlug: collectionConfig.slug,\n              columnIndex: baseCellClientProps.columnIndex,\n              customCellProps: baseCellClientProps.customCellProps,\n              field: _field,\n              i18n,\n              link: cellClientProps.link,\n              onClick: baseCellClientProps.onClick,\n              payload,\n              rowData: doc,\n            }\n\n            let CustomCell = null\n\n            if (_field?.type === 'richText') {\n              if (!_field?.editor) {\n                throw new MissingEditorProp(_field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n              }\n\n              if (typeof _field?.editor === 'function') {\n                throw new Error('Attempted to access unsanitized rich text editor.')\n              }\n\n              if (!_field.admin) {\n                _field.admin = {}\n              }\n\n              if (!_field.admin.components) {\n                _field.admin.components = {}\n              }\n\n              CustomCell = RenderServerComponent({\n                clientProps: cellClientProps,\n                Component: _field.editor.CellComponent,\n                importMap: payload.importMap,\n                serverProps: cellServerProps,\n              })\n            } else if (\n              cellClientProps.cellData &&\n              cellClientProps.field &&\n              hasOptionLabelJSXElement(cellClientProps)\n            ) {\n              CustomCell = RenderServerComponent({\n                clientProps: cellClientProps,\n                Component: DefaultCell,\n                importMap: payload.importMap,\n              })\n            } else {\n              const CustomCellComponent = _field?.admin?.components?.Cell\n\n              if (CustomCellComponent) {\n                CustomCell = RenderServerComponent({\n                  clientProps: cellClientProps,\n                  Component: CustomCellComponent,\n                  importMap: payload.importMap,\n                  serverProps: cellServerProps,\n                })\n              } else {\n                CustomCell = undefined\n              }\n            }\n\n            return (\n              <RenderCustomComponent\n                CustomComponent={CustomCell}\n                Fallback={\n                  <RenderDefaultCell\n                    clientProps={cellClientProps}\n                    columnIndex={index}\n                    enableRowSelections={enableRowSelections}\n                    isLinkedColumn={isLinkedColumn}\n                  />\n                }\n                key={`${i}-${index}`}\n              />\n            )\n          })\n        : [],\n    }\n\n    acc.push(column)\n\n    return acc\n  }, [])\n\n  if (beforeRows) {\n    sorted.unshift(...beforeRows)\n  }\n\n  return sorted\n}\n"],"mappings":";AAiBA,SAASA,iBAAiB,QAAQ;AAClC,SACEC,uBAAuB,EACvBC,SAAS,EACTC,yBAAyB,EACzBC,qBAAqB,QAChB;AACP,OAAOC,KAAA,MAAW;AAIlB,SAASC,qBAAqB,QAAQ;AACtC,SACEC,WAAW,EACXC,qBAAqB,EACrBC,iBAAiB,EACjBC,UAAU,QAEL;AACP,SAASC,wBAAwB,QAAQ;AACzC,SAASC,YAAY,QAAQ;AAkB7B,OAAO,MAAMC,gBAAA,GAAoBC,IAAA;EAC/B,MAAM;IACJC,UAAU;IACVC,sBAAsB;IACtBC,gBAAgB;IAChBC,iBAAiB;IACjBC,OAAO;IACPC,eAAe;IACfC,IAAI;IACJC,mBAAmB;IACnBC,IAAI;IACJC,OAAO;IACPC,eAAe;IACfC;EAAU,CACX,GAAGZ,IAAA;EAEJ;EACA,IAAIa,cAAA,GAAiBvB,qBAAA,CACnBQ,YAAA,CAAaI,sBAAA,CAAuBY,MAAM,GAC1C;EAGF,IAAIC,eAAA,GAAkBzB,qBAAA,CACpBQ,YAAA,CAAaK,gBAAA,CAAiBW,MAAM,GACpC,KACW;EAAA;EAEb;EACA;EACA;EACA,MAAME,YAAA,GAAeH,cAAA,EAAgBI,SAAA,CAAWC,KAAA,IAAU9B,SAAA,CAAU8B,KAAA;EAEpE,IAAIF,YAAA,GAAe,CAAC,GAAG;IACrB,MAAMG,OAAA,GAAUN,cAAA,CAAeO,MAAM,CAACJ,YAAA,EAAc,EAAE,CAAC,EAAE;IACzDH,cAAA,CAAeQ,OAAO,CAACF,OAAA;EACzB;EAEA,MAAMG,oBAAA,GAAuBV,UAAA,GACzBC,cAAA,CAAeI,SAAS,CAAEC,KAAA,IAAU,UAAUA,KAAA,IAASA,KAAA,CAAMK,IAAI,KAAKX,UAAA,IACtE,CAAC;EAEL,IAAIU,oBAAA,GAAuB,CAAC,GAAG;IAC7B,MAAME,eAAA,GAAkBX,cAAA,CAAeO,MAAM,CAACE,oBAAA,EAAsB,EAAE,CAAC,EAAE;IACzET,cAAA,CAAeQ,OAAO,CAACG,eAAA;EACzB;EAEA,MAAMC,MAAA,GAASrB,iBAAA,IAAqBC,OAAA;EAEpC,MAAMqB,YAAA,GAAeA,CAACC,QAAA,EAAUF,MAAA,KAC9BE,QAAA,EAAUC,IAAA,CAAK,CAACC,CAAA,EAAGC,CAAA;IACjB,MAAMC,MAAA,GAASN,MAAA,CAAOR,SAAS,CAAEe,MAAA,IAAW,UAAUH,CAAA,IAAKG,MAAA,CAAOC,QAAQ,KAAKJ,CAAA,CAAEN,IAAI;IACrF,MAAMW,MAAA,GAAST,MAAA,CAAOR,SAAS,CAAEe,MAAA,IAAW,UAAUF,CAAA,IAAKE,MAAA,CAAOC,QAAQ,KAAKH,CAAA,CAAEP,IAAI;IAErF,IAAIQ,MAAA,KAAW,CAAC,KAAKG,MAAA,KAAW,CAAC,GAAG;MAClC,OAAO;IACT;IAEA,IAAIH,MAAA,KAAW,CAAC,GAAG;MACjB,OAAO;IACT;IAEA,IAAIG,MAAA,KAAW,CAAC,GAAG;MACjB,OAAO,CAAC;IACV;IAEA,OAAOH,MAAA,GAASG,MAAA;EAClB;EAEF,IAAIT,MAAA,EAAQ;IACV;IACAZ,cAAA,GAAiBa,YAAA,CAAab,cAAA,EAAgBY,MAAA;IAC9CV,eAAA,GAAkBW,YAAA,CAAaX,eAAA,EAAiBU,MAAA,EAAQ;IAAA;EAC1D;EAEA,MAAMU,oBAAA,GAAuB,EAAE;EAE/B,MAAMC,MAAA,GAAmBvB,cAAA,EAAgBwB,MAAA,CAAO,CAACC,GAAA,EAAKpB,KAAA,EAAOqB,KAAA;IAC3D,IAAIpD,uBAAA,CAAwB+B,KAAA,KAAU,CAAC9B,SAAA,CAAU8B,KAAA,GAAQ;MACvD,OAAOoB,GAAA;IACT;IAEA,MAAME,MAAA,GAASzB,eAAA,CAAgB0B,IAAI,CAChCC,CAAA,IAAM,UAAUxB,KAAA,IAAS,UAAUwB,CAAA,IAAKA,CAAA,CAAEnB,IAAI,KAAKL,KAAA,CAAMK,IAAI;IAGhE,MAAMoB,gBAAA,GAAmBvC,iBAAA,EAAmBqC,IAAA,CACzCG,UAAA,IAAe1B,KAAA,IAAS,UAAUA,KAAA,IAAS0B,UAAA,CAAWX,QAAQ,KAAKf,KAAA,CAAMK,IAAI;IAGhF,IAAIsB,MAAA,GAAS;IAEb,IAAIF,gBAAA,EAAkB;MACpBE,MAAA,GAASF,gBAAA,CAAiBE,MAAM;IAClC,OAAO,IAAIxC,OAAA,IAAWyC,KAAA,CAAMC,OAAO,CAAC1C,OAAA,KAAYA,OAAA,CAAQ2C,MAAM,GAAG,GAAG;MAClEH,MAAA,GAASxC,OAAA,CAAQoC,IAAI,CAClBT,MAAA,IAAWd,KAAA,IAAS,UAAUA,KAAA,IAASc,MAAA,CAAOC,QAAQ,KAAKf,KAAA,CAAMK,IAAI,GACrEsB,MAAA;IACL,OAAO,IAAIV,oBAAA,CAAqBa,MAAM,GAAG,GAAG;MAC1CH,MAAA,GAAS;IACX;IAEA,IAAIA,MAAA,IAAU,CAACV,oBAAA,CAAqBc,QAAQ,CAACV,KAAA,GAAQ;MACnDJ,oBAAA,CAAqBe,IAAI,CAACX,KAAA;IAC5B;IAEA,MAAMY,mBAAA,GACJX,MAAA,IACA,WAAWA,MAAA,IACX,gBAAgBA,MAAA,CAAOY,KAAK,IAC5B,WAAWZ,MAAA,CAAOY,KAAK,CAACC,UAAU,IAClCb,MAAA,CAAOY,KAAK,CAACC,UAAU,CAACC,KAAK,KAAKC,SAAA,CAAU;IAAA,EACxCf,MAAA,CAAOY,KAAK,CAACC,UAAU,CAACC,KAAK,GAC7BC,SAAA;IAEN;IACA,MAAMC,WAAA,GAA8D;MAClEtC;IACF;IAEA,MAAMuC,sBAAA,GAGF;MACFC,WAAA,EAAaxC,KAAA;MACbyC,cAAA,EAAgBxD,gBAAA,CAAiByD,IAAI;MACrC1C,KAAA,EAAOsB,MAAA;MACP/B,IAAA;MACAC;IACF;IAEA,MAAMmD,WAAA,GAAcV,mBAAA,GAChB3D,qBAAA,CAAsB;MACpBgE,WAAA;MACAM,SAAA,EAAWX,mBAAA;MACXY,SAAA,EAAWrD,OAAA,CAAQqD,SAAS;MAC5BC,WAAA,EAAaP;IACf,KACAF,SAAA;IAEJ,MAAMU,yBAAA,GACJ/C,KAAA,IACAA,KAAA,CAAMgD,IAAI,KACThD,KAAA,CAAMgD,IAAI,KAAK,WAAWhD,KAAA,CAAMgD,IAAI,KAAK,WAAWhD,KAAA,CAAMgD,IAAI,KAAK,QAAO;IAE7E,MAAMC,OAAA,gBACJC,IAAA,CAACxE,UAAA;MACCyE,OAAA,EAASJ,yBAAA,IAA6B5E,yBAAA,CAA0B6B,KAAA,KAAUqC,SAAA;MAC1ED,KAAA,EAAOO,WAAA;MACPS,KAAA,EAAOpD,KAAA,IAAS,WAAWA,KAAA,GAASA,KAAA,CAAMoD,KAAK,GAAmBf,SAAA;MAClEhC,IAAA,EAAM,UAAUL,KAAA,GAAQA,KAAA,CAAMK,IAAI,GAAGgC,SAAA;MACpC,IAAI5C,eAAA,IAAmB,CAAC,CAAC;;IAI9B,MAAM4D,mBAAA,GAAiD;MACrDC,QAAA,EAAUjB,SAAA;MACVI,cAAA,EAAgBzD,sBAAA,CAAuB0D,IAAI;MAC3CtD,eAAA;MACAY,KAAA;MACAuD,OAAA,EAASlB;IACX;IAEA,MAAMvB,MAAA,GAAiB;MACrBC,QAAA,EAAU,UAAUf,KAAA,GAAQA,KAAA,CAAMK,IAAI,GAAGgC,SAAA;MACzCV,MAAA;MACAgB,WAAA;MACA3C,KAAA;MACAiD,OAAA;MACAO,aAAA,EAAe7B,MAAA,GACXtC,IAAA,CAAKoE,GAAG,CAAC,CAACC,GAAA,EAAKC,CAAA;QACb,MAAMC,cAAA,GAAiBvC,KAAA,KAAUJ,oBAAoB,CAAC,EAAE;QAExD,MAAM4C,eAAA,GAA6C;UACjD,GAAGR,mBAAmB;UACtBC,QAAA,EAAU,UAAUtD,KAAA,GAAQ0D,GAAG,CAAC1D,KAAA,CAAMK,IAAI,CAAC,GAAGgC,SAAA;UAC9CyB,IAAA,EAAMF,cAAA;UACNL,OAAA,EAASG;QACX;QAEA,MAAMK,eAAA,GAAmD;UACvDT,QAAA,EAAUO,eAAA,CAAgBP,QAAQ;UAClCU,SAAA,EAAWX,mBAAA,CAAoBW,SAAS;UACxC/E,gBAAA;UACAwD,cAAA,EAAgBxD,gBAAA,CAAiByD,IAAI;UACrCuB,WAAA,EAAaZ,mBAAA,CAAoBY,WAAW;UAC5C7E,eAAA,EAAiBiE,mBAAA,CAAoBjE,eAAe;UACpDY,KAAA,EAAOsB,MAAA;UACP/B,IAAA;UACAuE,IAAA,EAAMD,eAAA,CAAgBC,IAAI;UAC1BI,OAAA,EAASb,mBAAA,CAAoBa,OAAO;UACpC1E,OAAA;UACA+D,OAAA,EAASG;QACX;QAEA,IAAIS,UAAA,GAAa;QAEjB,IAAI7C,MAAA,EAAQ0B,IAAA,KAAS,YAAY;UAC/B,IAAI,CAAC1B,MAAA,EAAQ8C,MAAA,EAAQ;YACnB,MAAM,IAAIpG,iBAAA,CAAkBsD,MAAA,EAAQ;YAAA;UACtC;UAEA,IAAI,OAAOA,MAAA,EAAQ8C,MAAA,KAAW,YAAY;YACxC,MAAM,IAAIC,KAAA,CAAM;UAClB;UAEA,IAAI,CAAC/C,MAAA,CAAOY,KAAK,EAAE;YACjBZ,MAAA,CAAOY,KAAK,GAAG,CAAC;UAClB;UAEA,IAAI,CAACZ,MAAA,CAAOY,KAAK,CAACC,UAAU,EAAE;YAC5Bb,MAAA,CAAOY,KAAK,CAACC,UAAU,GAAG,CAAC;UAC7B;UAEAgC,UAAA,GAAa7F,qBAAA,CAAsB;YACjCgE,WAAA,EAAauB,eAAA;YACbjB,SAAA,EAAWtB,MAAA,CAAO8C,MAAM,CAACE,aAAa;YACtCzB,SAAA,EAAWrD,OAAA,CAAQqD,SAAS;YAC5BC,WAAA,EAAaiB;UACf;QACF,OAAO,IACLF,eAAA,CAAgBP,QAAQ,IACxBO,eAAA,CAAgB7D,KAAK,IACrBrB,wBAAA,CAAyBkF,eAAA,GACzB;UACAM,UAAA,GAAa7F,qBAAA,CAAsB;YACjCgE,WAAA,EAAauB,eAAA;YACbjB,SAAA,EAAWrE,WAAA;YACXsE,SAAA,EAAWrD,OAAA,CAAQqD;UACrB;QACF,OAAO;UACL,MAAM0B,mBAAA,GAAsBjD,MAAA,EAAQY,KAAA,EAAOC,UAAA,EAAYqC,IAAA;UAEvD,IAAID,mBAAA,EAAqB;YACvBJ,UAAA,GAAa7F,qBAAA,CAAsB;cACjCgE,WAAA,EAAauB,eAAA;cACbjB,SAAA,EAAW2B,mBAAA;cACX1B,SAAA,EAAWrD,OAAA,CAAQqD,SAAS;cAC5BC,WAAA,EAAaiB;YACf;UACF,OAAO;YACLI,UAAA,GAAa9B,SAAA;UACf;QACF;QAEA,oBACEa,IAAA,CAAC1E,qBAAA;UACCiG,eAAA,EAAiBN,UAAA;UACjBO,QAAA,eACExB,IAAA,CAACzE,iBAAA;YACC6D,WAAA,EAAauB,eAAA;YACbI,WAAA,EAAa5C,KAAA;YACb/B,mBAAA,EAAqBA,mBAAA;YACrBsE,cAAA,EAAgBA;;WAGf,GAAGD,CAAA,IAAKtC,KAAA,EAAO;MAG1B,KACA;IACN;IAEAD,GAAA,CAAIY,IAAI,CAAClB,MAAA;IAET,OAAOM,GAAA;EACT,GAAG,EAAE;EAEL,IAAIrC,UAAA,EAAY;IACdmC,MAAA,CAAOf,OAAO,IAAIpB,UAAA;EACpB;EAEA,OAAOmC,MAAA;AACT","ignoreList":[]}