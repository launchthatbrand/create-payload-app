{"version":3,"file":"index.js","names":["React","createContext","useCallback","ServerFunctionsContext","undefined","useServerFunctions","context","use","Error","ServerFunctionsProvider","children","serverFunction","getDocumentSlots","args","name","schedulePublish","signal","remoteSignal","rest","aborted","result","_err","console","error","type","doc","value","relationTo","getFormState","fallbackLocale","state","getTableState","renderDocument","copyDataFromLocale","_jsx"],"sources":["../../../src/providers/ServerFunctions/index.tsx"],"sourcesContent":["import type {\n  BuildFormStateArgs,\n  BuildTableStateArgs,\n  Data,\n  DocumentSlots,\n  ErrorResult,\n  Locale,\n  ServerFunctionClient,\n} from 'payload'\n\nimport React, { createContext, useCallback } from 'react'\n\nimport type { buildFormStateHandler } from '../../utilities/buildFormState.js'\nimport type { buildTableStateHandler } from '../../utilities/buildTableState.js'\nimport type { CopyDataFromLocaleArgs } from '../../utilities/copyDataFromLocale.js'\nimport type {\n  schedulePublishHandler,\n  SchedulePublishHandlerArgs,\n} from '../../utilities/schedulePublishHandler.js'\n\ntype GetFormStateClient = (\n  args: {\n    signal?: AbortSignal\n  } & Omit<BuildFormStateArgs, 'clientConfig' | 'req'>,\n) => ReturnType<typeof buildFormStateHandler>\n\ntype SchedulePublishClient = (\n  args: {\n    signal?: AbortSignal\n  } & Omit<SchedulePublishHandlerArgs, 'clientConfig' | 'req'>,\n) => ReturnType<typeof schedulePublishHandler>\n\ntype GetTableStateClient = (\n  args: {\n    signal?: AbortSignal\n  } & Omit<BuildTableStateArgs, 'clientConfig' | 'req'>,\n) => ReturnType<typeof buildTableStateHandler>\n\ntype RenderDocument = (args: {\n  collectionSlug: string\n  disableActions?: boolean\n  docID?: number | string\n  drawerSlug?: string\n  initialData?: Data\n  locale?: Locale\n  overrideEntityVisibility?: boolean\n  redirectAfterCreate?: boolean\n  redirectAfterDelete?: boolean\n  redirectAfterDuplicate?: boolean\n  signal?: AbortSignal\n}) => Promise<\n  { data: Data; Document: React.ReactNode } | ({ data: never; Document: never } & ErrorResult)\n>\n\ntype CopyDataFromLocaleClient = (\n  args: {\n    signal?: AbortSignal\n  } & Omit<CopyDataFromLocaleArgs, 'req'>,\n) => Promise<{ data: Data }>\n\ntype GetDocumentSlots = (args: {\n  collectionSlug: string\n  signal?: AbortSignal\n}) => Promise<DocumentSlots>\n\ntype ServerFunctionsContextType = {\n  copyDataFromLocale: CopyDataFromLocaleClient\n  getDocumentSlots: GetDocumentSlots\n  getFormState: GetFormStateClient\n  getTableState: GetTableStateClient\n  renderDocument: RenderDocument\n  schedulePublish: SchedulePublishClient\n  serverFunction: ServerFunctionClient\n}\n\nexport const ServerFunctionsContext = createContext<ServerFunctionsContextType | undefined>(\n  undefined,\n)\n\nexport const useServerFunctions = () => {\n  const context = React.use(ServerFunctionsContext)\n  if (context === undefined) {\n    throw new Error('useServerFunctions must be used within a ServerFunctionsProvider')\n  }\n  return context\n}\n\nexport const ServerFunctionsProvider: React.FC<{\n  children: React.ReactNode\n  serverFunction: ServerFunctionClient\n}> = ({ children, serverFunction }) => {\n  if (!serverFunction) {\n    throw new Error('ServerFunctionsProvider requires a serverFunction prop')\n  }\n\n  const getDocumentSlots = useCallback<GetDocumentSlots>(\n    async (args) =>\n      await serverFunction({\n        name: 'render-document-slots',\n        args,\n      }),\n    [serverFunction],\n  )\n\n  const schedulePublish = useCallback<SchedulePublishClient>(\n    async (args) => {\n      const { signal: remoteSignal, ...rest } = args\n\n      try {\n        if (!remoteSignal?.aborted) {\n          const result = (await serverFunction({\n            name: 'schedule-publish',\n            args: { ...rest },\n          })) as Awaited<ReturnType<typeof schedulePublishHandler>> // TODO: infer this type when `strictNullChecks` is enabled\n\n          if (!remoteSignal?.aborted) {\n            return result\n          }\n        }\n      } catch (_err) {\n        console.error(_err) // eslint-disable-line no-console\n      }\n\n      let error = `Error scheduling ${rest.type}`\n\n      if (rest.doc) {\n        error += ` for document with ID ${rest.doc.value} in collection ${rest.doc.relationTo}`\n      }\n\n      return { error: '' }\n    },\n    [serverFunction],\n  )\n\n  const getFormState = useCallback<GetFormStateClient>(\n    async (args) => {\n      const { signal: remoteSignal, ...rest } = args || {}\n\n      try {\n        if (!remoteSignal?.aborted) {\n          const result = (await serverFunction({\n            name: 'form-state',\n            args: { fallbackLocale: false, ...rest },\n          })) as Awaited<ReturnType<typeof buildFormStateHandler>> // TODO: infer this type when `strictNullChecks` is enabled\n\n          if (!remoteSignal?.aborted) {\n            return result\n          }\n        }\n      } catch (_err) {\n        console.error(_err) // eslint-disable-line no-console\n      }\n\n      return { state: null }\n    },\n    [serverFunction],\n  )\n\n  const getTableState = useCallback<GetTableStateClient>(\n    async (args) => {\n      const { signal: remoteSignal, ...rest } = args || {}\n\n      try {\n        if (!remoteSignal?.aborted) {\n          const result = (await serverFunction({\n            name: 'table-state',\n            args: { fallbackLocale: false, ...rest },\n          })) as Awaited<ReturnType<typeof buildTableStateHandler>> // TODO: infer this type when `strictNullChecks` is enabled\n\n          if (!remoteSignal?.aborted) {\n            return result\n          }\n        }\n      } catch (_err) {\n        console.error(_err) // eslint-disable-line no-console\n      }\n\n      // return { state: args.formState }\n    },\n    [serverFunction],\n  )\n\n  const renderDocument = useCallback<RenderDocument>(\n    async (args) => {\n      const { signal: remoteSignal, ...rest } = args || {}\n\n      try {\n        const result = (await serverFunction({\n          name: 'render-document',\n          args: { fallbackLocale: false, ...rest },\n        })) as Awaited<ReturnType<typeof renderDocument>> // TODO: infer this type when `strictNullChecks` is enabled\n\n        return result\n      } catch (_err) {\n        console.error(_err) // eslint-disable-line no-console\n      }\n    },\n    [serverFunction],\n  )\n\n  const copyDataFromLocale = useCallback<CopyDataFromLocaleClient>(\n    async (args) => {\n      const { signal: remoteSignal, ...rest } = args || {}\n\n      try {\n        const result = (await serverFunction({\n          name: 'copy-data-from-locale',\n          args: rest,\n        })) as { data: Data }\n\n        if (!remoteSignal?.aborted) {\n          return result\n        }\n      } catch (_err) {\n        console.error(_err) // eslint-disable-line no-console\n      }\n    },\n    [serverFunction],\n  )\n\n  return (\n    <ServerFunctionsContext\n      value={{\n        copyDataFromLocale,\n        getDocumentSlots,\n        getFormState,\n        getTableState,\n        renderDocument,\n        schedulePublish,\n        serverFunction,\n      }}\n    >\n      {children}\n    </ServerFunctionsContext>\n  )\n}\n"],"mappings":"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","ignoreList":[]}