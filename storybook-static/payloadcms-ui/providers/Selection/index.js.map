{"version":3,"file":"index.js","names":["useSearchParams","qs","React","createContext","use","useCallback","useEffect","useRef","useState","parseSearchParams","useLocale","SelectAllStatus","Context","SelectionProvider","children","docs","totalDocs","user","contextRef","code","locale","selected","setSelected","rows","Map","forEach","id","set","selectAll","setSelectAll","count","setCount","searchParams","toggleAll","allAvailable","_isLocked","_userEditing","setSelection","doc","find","existingValue","get","isSelected","newMap","getQueryParams","additionalWhereParams","where","params","not_equals","ids","key","value","push","in","and","stringify","addQueryPrefix","some","all","size","_","length","newCount","current","_jsx","useSelection"],"sources":["../../../src/providers/Selection/index.tsx"],"sourcesContent":["'use client'\nimport type { ClientUser, Where } from 'payload'\n\nimport { useSearchParams } from 'next/navigation.js'\nimport * as qs from 'qs-esm'\nimport React, { createContext, use, useCallback, useEffect, useRef, useState } from 'react'\n\nimport { parseSearchParams } from '../../utilities/parseSearchParams.js'\nimport { useLocale } from '../Locale/index.js'\n\nexport enum SelectAllStatus {\n  AllAvailable = 'allAvailable',\n  AllInPage = 'allInPage',\n  None = 'none',\n  Some = 'some',\n}\n\ntype SelectionContext = {\n  count: number\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  getQueryParams: (additionalParams?: Where) => string\n  selectAll: SelectAllStatus\n  selected: Map<number | string, boolean>\n  setSelection: (id: number | string) => void\n  toggleAll: (allAvailable?: boolean) => void\n  totalDocs: number\n}\n\nconst Context = createContext({} as SelectionContext)\n\ntype Props = {\n  readonly children: React.ReactNode\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly docs: any[]\n  readonly totalDocs: number\n  user: ClientUser\n}\n\nexport const SelectionProvider: React.FC<Props> = ({ children, docs = [], totalDocs, user }) => {\n  const contextRef = useRef({} as SelectionContext)\n\n  const { code: locale } = useLocale()\n\n  const [selected, setSelected] = useState<SelectionContext['selected']>(() => {\n    const rows = new Map()\n    docs.forEach(({ id }) => {\n      rows.set(id, false)\n    })\n    return rows\n  })\n\n  const [selectAll, setSelectAll] = useState<SelectAllStatus>(SelectAllStatus.None)\n  const [count, setCount] = useState(0)\n  const searchParams = useSearchParams()\n\n  const toggleAll = useCallback(\n    (allAvailable = false) => {\n      const rows = new Map()\n      if (allAvailable) {\n        setSelectAll(SelectAllStatus.AllAvailable)\n        docs.forEach(({ id, _isLocked, _userEditing }) => {\n          if (!_isLocked || _userEditing?.id === user?.id) {\n            rows.set(id, true)\n          }\n        })\n      } else if (\n        selectAll === SelectAllStatus.AllAvailable ||\n        selectAll === SelectAllStatus.AllInPage\n      ) {\n        setSelectAll(SelectAllStatus.None)\n      } else {\n        docs.forEach(({ id, _isLocked, _userEditing }) => {\n          if (!_isLocked || _userEditing?.id === user?.id) {\n            rows.set(id, selectAll !== SelectAllStatus.Some)\n          }\n        })\n      }\n\n      setSelected(rows)\n    },\n    [docs, selectAll, user?.id],\n  )\n\n  const setSelection = useCallback(\n    (id) => {\n      const doc = docs.find((doc) => doc.id === id)\n\n      if (doc?._isLocked && user?.id !== doc?._userEditing.id) {\n        return // Prevent selection if the document is locked\n      }\n\n      const existingValue = selected.get(id)\n      const isSelected = typeof existingValue === 'boolean' ? !existingValue : true\n\n      const newMap = new Map(selected.set(id, isSelected))\n\n      // If previously selected all and now deselecting, adjust status\n      if (selectAll === SelectAllStatus.AllAvailable && !isSelected) {\n        setSelectAll(SelectAllStatus.Some)\n      }\n\n      setSelected(newMap)\n    },\n    [selected, docs, selectAll, user?.id],\n  )\n\n  const getQueryParams = useCallback(\n    (additionalWhereParams?: Where): string => {\n      let where: Where\n\n      if (selectAll === SelectAllStatus.AllAvailable) {\n        const params = parseSearchParams(searchParams)?.where as Where\n\n        where = params || {\n          id: { not_equals: '' },\n        }\n      } else {\n        const ids = []\n\n        for (const [key, value] of selected) {\n          if (value) {\n            ids.push(key)\n          }\n        }\n\n        where = {\n          id: {\n            in: ids,\n          },\n        }\n      }\n\n      if (additionalWhereParams) {\n        where = {\n          and: [{ ...additionalWhereParams }, where],\n        }\n      }\n\n      return qs.stringify(\n        {\n          locale,\n          where,\n        },\n        { addQueryPrefix: true },\n      )\n    },\n    [selectAll, selected, locale, searchParams],\n  )\n\n  useEffect(() => {\n    if (selectAll === SelectAllStatus.AllAvailable) {\n      return\n    }\n    let some = false\n    let all = true\n\n    if (!selected.size) {\n      all = false\n      some = false\n    } else {\n      for (const [_, value] of selected) {\n        all = all && value\n        some = some || value\n      }\n    }\n\n    if (all && selected.size === docs.length) {\n      setSelectAll(SelectAllStatus.AllInPage)\n    } else if (some) {\n      setSelectAll(SelectAllStatus.Some)\n    } else {\n      setSelectAll(SelectAllStatus.None)\n    }\n  }, [selectAll, selected, totalDocs, docs])\n\n  useEffect(() => {\n    let newCount = 0\n\n    if (selectAll === SelectAllStatus.AllAvailable) {\n      newCount = totalDocs\n    } else {\n      for (const [_, value] of selected) {\n        if (value) {\n          newCount++\n        }\n      }\n    }\n\n    setCount(newCount)\n  }, [selectAll, selected, totalDocs])\n\n  contextRef.current = {\n    count,\n    getQueryParams,\n    selectAll,\n    selected,\n    setSelection,\n    toggleAll,\n    totalDocs,\n  }\n\n  return <Context value={contextRef.current}>{children}</Context>\n}\n\nexport const useSelection = (): SelectionContext => use(Context)\n"],"mappings":"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","ignoreList":[]}