{"version":3,"file":"index.js","names":["useRouter","useSearchParams","isNumber","transformColumnsToSearchParams","qs","React","useCallback","useEffect","useMemo","useRef","useState","useListDrawerContext","useEffectEvent","useRouteTransition","parseSearchParams","ListQueryContext","ListQueryModifiedContext","useListQuery","ListQueryProvider","children","collectionSlug","columns","data","defaultLimit","defaultSort","listPreferences","modifySearchParams","onQueryChange","onQueryChangeFromProps","router","rawSearchParams","startRouteTransition","modified","setModified","searchParams","contextRef","current","currentQuery","setCurrentQuery","refineListData","incomingQuery","undefined","page","newQuery","limit","String","preset","search","sort","where","replace","stringify","JSON","addQueryPrefix","onChangeFn","handlePageChange","arg","handlePerPageChange","handleSearchChange","handleSortChange","handleWhereChange","syncQuery","shouldUpdateQueryString","window","history","replaceState","_jsx","value","query"],"sources":["../../../src/providers/ListQuery/index.tsx"],"sourcesContent":["'use client'\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { type ListQuery, type Where } from 'payload'\nimport { isNumber, transformColumnsToSearchParams } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport type { IListQueryContext, ListQueryProps } from './types.js'\n\nimport { useListDrawerContext } from '../../elements/ListDrawer/Provider.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { parseSearchParams } from '../../utilities/parseSearchParams.js'\nimport { ListQueryContext, ListQueryModifiedContext } from './context.js'\n\nexport { useListQuery } from './context.js'\n\nexport const ListQueryProvider: React.FC<ListQueryProps> = ({\n  children,\n  collectionSlug,\n  columns,\n  data,\n  defaultLimit,\n  defaultSort,\n  listPreferences,\n  modifySearchParams,\n  onQueryChange: onQueryChangeFromProps,\n}) => {\n  'use no memo'\n  const router = useRouter()\n  const rawSearchParams = useSearchParams()\n  const { startRouteTransition } = useRouteTransition()\n  const [modified, setModified] = useState(false)\n\n  const searchParams = useMemo<ListQuery>(\n    () => parseSearchParams(rawSearchParams),\n    [rawSearchParams],\n  )\n\n  const contextRef = useRef({} as IListQueryContext)\n\n  contextRef.current.modified = modified\n\n  const { onQueryChange } = useListDrawerContext()\n\n  const [currentQuery, setCurrentQuery] = useState<ListQuery>(() => {\n    if (modifySearchParams) {\n      return searchParams\n    } else {\n      return {}\n    }\n  })\n\n  const refineListData = useCallback(\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async (incomingQuery: ListQuery, modified?: boolean) => {\n      if (modified !== undefined) {\n        setModified(modified)\n      } else {\n        setModified(true)\n      }\n\n      let page = 'page' in incomingQuery ? incomingQuery.page : currentQuery?.page\n\n      if ('where' in incomingQuery || 'search' in incomingQuery) {\n        page = '1'\n      }\n\n      const newQuery: ListQuery = {\n        columns: 'columns' in incomingQuery ? incomingQuery.columns : currentQuery.columns,\n        limit:\n          'limit' in incomingQuery\n            ? incomingQuery.limit\n            : (currentQuery?.limit ?? String(defaultLimit)),\n        page,\n        preset: 'preset' in incomingQuery ? incomingQuery.preset : currentQuery?.preset,\n        search: 'search' in incomingQuery ? incomingQuery.search : currentQuery?.search,\n        sort:\n          'sort' in incomingQuery\n            ? incomingQuery.sort\n            : ((currentQuery?.sort as string) ?? defaultSort),\n        where: 'where' in incomingQuery ? incomingQuery.where : currentQuery?.where,\n      }\n\n      if (modifySearchParams) {\n        startRouteTransition(() =>\n          router.replace(\n            `${qs.stringify(\n              { ...newQuery, columns: JSON.stringify(newQuery.columns) },\n              { addQueryPrefix: true },\n            )}`,\n          ),\n        )\n      } else if (\n        typeof onQueryChange === 'function' ||\n        typeof onQueryChangeFromProps === 'function'\n      ) {\n        const onChangeFn = onQueryChange || onQueryChangeFromProps\n        onChangeFn(newQuery)\n      }\n\n      setCurrentQuery(newQuery)\n    },\n    [\n      currentQuery?.columns,\n      currentQuery?.limit,\n      currentQuery?.page,\n      currentQuery?.search,\n      currentQuery?.sort,\n      currentQuery?.where,\n      currentQuery?.preset,\n      startRouteTransition,\n      defaultLimit,\n      defaultSort,\n      modifySearchParams,\n      onQueryChange,\n      onQueryChangeFromProps,\n      router,\n    ],\n  )\n\n  const handlePageChange = useCallback(\n    async (arg: number) => {\n      await refineListData({ page: String(arg) })\n    },\n    [refineListData],\n  )\n\n  const handlePerPageChange = React.useCallback(\n    async (arg: number) => {\n      await refineListData({ limit: String(arg), page: '1' })\n    },\n    [refineListData],\n  )\n\n  const handleSearchChange = useCallback(\n    async (arg: string) => {\n      const search = arg === '' ? undefined : arg\n      await refineListData({ search })\n    },\n    [refineListData],\n  )\n\n  const handleSortChange = useCallback(\n    async (arg: string) => {\n      await refineListData({ sort: arg })\n    },\n    [refineListData],\n  )\n\n  const handleWhereChange = useCallback(\n    async (arg: Where) => {\n      await refineListData({ where: arg })\n    },\n    [refineListData],\n  )\n\n  const syncQuery = useEffectEvent(() => {\n    let shouldUpdateQueryString = false\n    const newQuery = { ...(currentQuery || {}) }\n\n    // Allow the URL to override the default limit\n    if (isNumber(defaultLimit) && !('limit' in currentQuery)) {\n      newQuery.limit = String(defaultLimit)\n      shouldUpdateQueryString = true\n    }\n\n    // Allow the URL to override the default sort\n    if (defaultSort && !('sort' in currentQuery)) {\n      newQuery.sort = defaultSort\n      shouldUpdateQueryString = true\n    }\n\n    // Only modify columns if they originated from preferences\n    // We can assume they did if `listPreferences.columns` is defined\n    if (columns && listPreferences?.columns && !('columns' in currentQuery)) {\n      newQuery.columns = transformColumnsToSearchParams(columns)\n      shouldUpdateQueryString = true\n    }\n\n    if (shouldUpdateQueryString) {\n      setCurrentQuery(newQuery)\n      // Do not use router.replace here to avoid re-rendering on initial load\n      window.history.replaceState(\n        null,\n        '',\n        `?${qs.stringify({ ...newQuery, columns: JSON.stringify(newQuery.columns) })}`,\n      )\n    }\n  })\n\n  // If `defaultLimit` or `defaultSort` are updated externally, update the query\n  // I.e. when HMR runs, these properties may be different\n  useEffect(() => {\n    if (modifySearchParams) {\n      syncQuery()\n    }\n  }, [defaultSort, defaultLimit, modifySearchParams, columns])\n\n  return (\n    <ListQueryContext\n      value={{\n        collectionSlug,\n        data,\n        handlePageChange,\n        handlePerPageChange,\n        handleSearchChange,\n        handleSortChange,\n        handleWhereChange,\n        query: currentQuery,\n        refineListData,\n        setModified,\n        ...contextRef.current,\n      }}\n    >\n      <ListQueryModifiedContext value={modified}>{children}</ListQueryModifiedContext>\n    </ListQueryContext>\n  )\n}\n"],"mappings":"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","ignoreList":[]}