{"version":3,"file":"index.js","names":["c","_c","getTranslation","React","Fragment","useCallback","Banner","Button","DraggableSortableItem","DraggableSortable","DrawerToggler","useDrawerSlug","ErrorPill","RenderCustomComponent","useForm","useFormSubmitted","extractRowsAndCollapsedIDs","toggleAllRows","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","FieldDescription","FieldError","FieldLabel","fieldBaseClass","BlockRow","BlocksDrawer","baseClass","BlocksFieldComponent","props","$","i18n","t","field","t0","path","permissions","readOnly","schemaPath","schemaPathFromProps","validate","name","admin","t1","blockReferences","blocks","label","labels","labelsFromProps","localized","maxRows","minRows","minRowsProp","required","t2","undefined","className","description","isSortable","t3","setDocFieldPreferences","addFieldRow","dispatchFields","setModified","code","locale","config","t4","localization","drawerSlug","submitted","plural","singular","t5","bb0","fallback","defaultLocale","editingDefaultLocale","t6","value","options","memoizedValidate","t7","hasRows","customComponents","t8","disabled","errorPaths","rows","t9","showError","valid","value_0","t10","AfterInput","BeforeInput","Description","Error","Label","RowLabels","t11","t12","rowIndex","blockType","setTimeout","addRow","t13","rowIndex_0","type","duplicateRow","t14","rowIndex_1","removeRow","t15","moveFromIndex","moveToIndex","moveRow","t16","collapsed","collapsedIDs","updatedRows","toggleCollapseAll","t17","rowID","collapsed_0","collapsedIDs_0","updatedRows_0","setCollapse","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showMinRows","showRequired","t18","t19","filter","Boolean","t20","_jsx","CustomComponent","Fallback","t21","count","withMessage","_jsxs","join","id","replace","children","onClick","fieldValue","ids","map","_temp","onDragEnd","t22","moveFromIndex_0","moveToIndex_0","row_0","i","blockType_0","isLoading","row","blockConfig","blocksMap","find","block","slug","rowPath","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","errorCount","fields","parentPath","rowCount","buttonStyle","el","icon","iconPosition","iconStyle","addRowIndex","BlocksField"],"sources":["../../../src/fields/Blocks/index.tsx"],"sourcesContent":["'use client'\nimport type { BlocksFieldClientComponent, ClientBlock } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { Fragment, useCallback } from 'react'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { DrawerToggler } from '../../elements/Drawer/index.js'\nimport { useDrawerSlug } from '../../elements/Drawer/useDrawerSlug.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { extractRowsAndCollapsedIDs, toggleAllRows } from '../../forms/Form/rowHelpers.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { BlockRow } from './BlockRow.js'\nimport { BlocksDrawer } from './BlocksDrawer/index.js'\nimport './index.scss'\n\nconst baseClass = 'blocks-field'\n\nconst BlocksFieldComponent: BlocksFieldClientComponent = (props) => {\n  const { i18n, t } = useTranslation()\n\n  const {\n    field: {\n      name,\n      admin: { className, description, isSortable = true } = {},\n      blockReferences,\n      blocks,\n      label,\n      labels: labelsFromProps,\n      localized,\n      maxRows,\n      minRows: minRowsProp,\n      required,\n    },\n    path,\n    permissions,\n    readOnly,\n    schemaPath: schemaPathFromProps,\n    validate,\n  } = props\n\n  const schemaPath = schemaPathFromProps ?? name\n\n  const minRows = (minRowsProp ?? required) ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const { addFieldRow, dispatchFields, setModified } = useForm()\n  const { code: locale } = useLocale()\n  const {\n    config: { localization },\n    config,\n  } = useConfig()\n  const drawerSlug = useDrawerSlug('blocks-drawer')\n  const submitted = useFormSubmitted()\n\n  const labels = {\n    plural: t('fields:blocks'),\n    singular: t('fields:block'),\n    ...labelsFromProps,\n  }\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label, RowLabels } = {},\n    disabled,\n    errorPaths,\n    rows = [],\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    path,\n    validate: memoizedValidate,\n  })\n\n  const addRow = useCallback(\n    (rowIndex: number, blockType: string) => {\n      addFieldRow({\n        blockType,\n        path,\n        rowIndex,\n        schemaPath,\n      })\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [addFieldRow, path, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({\n        type: 'REMOVE_ROW',\n        path,\n        rowIndex,\n      })\n\n      setModified(true)\n    },\n    [path, dispatchFields, setModified],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      dispatchFields({ type: 'MOVE_ROW', moveFromIndex, moveToIndex, path })\n      setModified(true)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = toggleAllRows({\n        collapsed,\n        rows,\n      })\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = extractRowsAndCollapsedIDs({\n        collapsed,\n        rowID,\n        rows,\n      })\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && fieldErrorCount + (valid ? 0 : 1) > 0\n\n  const showMinRows = rows.length < minRows || (required && rows.length === 0)\n  const showRequired = readOnly && rows.length === 0\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path?.replace(/\\./g, '__')}`}\n    >\n      {showError && (\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      )}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__heading-with-error`}>\n            <h3>\n              <RenderCustomComponent\n                CustomComponent={Label}\n                Fallback={\n                  <FieldLabel label={label} localized={localized} path={path} required={required} />\n                }\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          {rows.length > 0 && (\n            <ul className={`${baseClass}__header-actions`}>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(true)}\n                  type=\"button\"\n                >\n                  {t('fields:collapseAll')}\n                </button>\n              </li>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(false)}\n                  type=\"button\"\n                >\n                  {t('fields:showAll')}\n                </button>\n              </li>\n            </ul>\n          )}\n        </div>\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </header>\n      {BeforeInput}\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {(rows.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((row, i) => {\n            const { blockType, isLoading } = row\n            const blockConfig: ClientBlock =\n              config.blocksMap[blockType] ??\n              ((blockReferences ?? blocks).find(\n                (block) => typeof block !== 'string' && block.slug === blockType,\n              ) as ClientBlock)\n\n            if (blockConfig) {\n              const rowPath = `${path}.${i}`\n\n              const rowErrorCount = errorPaths.filter((errorPath) =>\n                errorPath.startsWith(rowPath + '.'),\n              ).length\n\n              return (\n                <DraggableSortableItem\n                  disabled={readOnly || disabled || !isSortable}\n                  id={row.id}\n                  key={row.id}\n                >\n                  {(draggableSortableItemProps) => (\n                    <BlockRow\n                      {...draggableSortableItemProps}\n                      addRow={addRow}\n                      block={blockConfig}\n                      blocks={blockReferences ?? blocks}\n                      duplicateRow={duplicateRow}\n                      errorCount={rowErrorCount}\n                      fields={blockConfig.fields}\n                      hasMaxRows={hasMaxRows}\n                      isLoading={isLoading}\n                      isSortable={isSortable}\n                      Label={RowLabels?.[i]}\n                      labels={labels}\n                      moveRow={moveRow}\n                      parentPath={path}\n                      path={rowPath}\n                      permissions={permissions}\n                      readOnly={readOnly || disabled}\n                      removeRow={removeRow}\n                      row={row}\n                      rowCount={rows.length}\n                      rowIndex={i}\n                      schemaPath={schemaPath + blockConfig.slug}\n                      setCollapse={setCollapse}\n                    />\n                  )}\n                </DraggableSortableItem>\n              )\n            }\n\n            return null\n          })}\n          {!editingDefaultLocale && (\n            <React.Fragment>\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:row' : 'general:rows'),\n                  })}\n                </Banner>\n              )}\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!hasMaxRows && (\n        <Fragment>\n          <DrawerToggler\n            className={`${baseClass}__drawer-toggler`}\n            disabled={readOnly || disabled}\n            slug={drawerSlug}\n          >\n            <Button\n              buttonStyle=\"icon-label\"\n              disabled={readOnly || disabled}\n              el=\"span\"\n              icon=\"plus\"\n              iconPosition=\"left\"\n              iconStyle=\"with-border\"\n            >\n              {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n            </Button>\n          </DrawerToggler>\n          <BlocksDrawer\n            addRow={addRow}\n            addRowIndex={rows?.length || 0}\n            blocks={blockReferences ?? blocks}\n            drawerSlug={drawerSlug}\n            labels={labels}\n          />\n        </Fragment>\n      )}\n      {AfterInput}\n    </div>\n  )\n}\n\nexport const BlocksField = withCondition(BlocksFieldComponent)\n"],"mappings":"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","ignoreList":[]}