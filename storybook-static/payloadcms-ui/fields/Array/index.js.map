{"version":3,"file":"index.js","names":["c","_c","getTranslation","React","useCallback","Banner","Button","DraggableSortableItem","DraggableSortable","ErrorPill","RenderCustomComponent","FieldDescription","FieldError","FieldLabel","useForm","useFormSubmitted","extractRowsAndCollapsedIDs","toggleAllRows","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","fieldBaseClass","ArrayRow","baseClass","ArrayFieldComponent","props","$","field","t0","forceRender","t1","path","permissions","readOnly","schemaPath","schemaPathFromProps","validate","name","admin","t2","fields","label","localized","maxRows","minRows","minRowsProp","required","t3","undefined","className","description","isSortable","t4","setDocFieldPreferences","addFieldRow","dispatchFields","setModified","submitted","code","locale","i18n","t","config","t5","localization","t6","bb0","fallback","defaultLocale","editingDefaultLocale","t7","p","labels","plural","singular","getLabels","t8","value","options","memoizedValidate","t9","hasRows","customComponents","t10","disabled","errorPaths","rows","t11","showError","valid","value_0","t12","AfterInput","BeforeInput","Description","Error","Label","RowLabels","t13","rowsData","t14","rowIndex","setTimeout","addRow","t15","rowIndex_0","type","duplicateRow","t16","rowIndex_1","removeRow","t17","moveFromIndex","moveToIndex","moveRow","t18","collapsed","collapsedIDs","updatedRows","toggleCollapseAll","t19","rowID","collapsed_0","collapsedIDs_0","updatedRows_0","setCollapse","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showRequired","showMinRows","t20","t21","filter","Boolean","t22","_jsx","CustomComponent","Fallback","t23","count","withMessage","_jsxs","join","id","replace","children","as","onClick","fieldValue","ids","map","_temp","onDragEnd","t24","moveFromIndex_0","moveToIndex_0","rowData","i","rowID_0","isLoading","rowPath","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","CustomRowLabel","errorCount","parentPath","row","rowCount","Fragment","buttonStyle","icon","iconPosition","iconStyle","ArrayField"],"sources":["../../../src/fields/Array/index.tsx"],"sourcesContent":["'use client'\nimport type {\n  ArrayFieldClientComponent,\n  ArrayFieldClientProps,\n  ArrayField as ArrayFieldType,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { useCallback } from 'react'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { FieldDescription } from '../../fields/FieldDescription/index.js'\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { extractRowsAndCollapsedIDs, toggleAllRows } from '../../forms/Form/rowHelpers.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { ArrayRow } from './ArrayRow.js'\nimport './index.scss'\n\nconst baseClass = 'array-field'\n\nexport const ArrayFieldComponent: ArrayFieldClientComponent = (props) => {\n  const {\n    field: {\n      name,\n      admin: { className, description, isSortable = true } = {},\n      fields,\n      label,\n      localized,\n      maxRows,\n      minRows: minRowsProp,\n      required,\n    },\n    forceRender = false,\n    path,\n    permissions,\n    readOnly,\n    schemaPath: schemaPathFromProps,\n    validate,\n  } = props\n\n  const schemaPath = schemaPathFromProps ?? name\n\n  const minRows = (minRowsProp ?? required) ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const { addFieldRow, dispatchFields, setModified } = useForm()\n  const submitted = useFormSubmitted()\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const {\n    config: { localization },\n  } = useConfig()\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  // Handle labeling for Arrays, Global Arrays, and Blocks\n  const getLabels = (p: ArrayFieldClientProps): Partial<ArrayFieldType['labels']> => {\n    if ('labels' in p && p?.labels) {\n      return p.labels\n    }\n\n    if ('labels' in p.field && p.field.labels) {\n      return { plural: p.field.labels?.plural, singular: p.field.labels?.singular }\n    }\n\n    if ('label' in p.field && p.field.label) {\n      return { plural: undefined, singular: p.field.label }\n    }\n\n    return { plural: t('general:rows'), singular: t('general:row') }\n  }\n\n  const labels = getLabels(props)\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label, RowLabels } = {},\n    disabled,\n    errorPaths,\n    rows: rowsData = [],\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    path,\n    validate: memoizedValidate,\n  })\n\n  const addRow = useCallback(\n    (rowIndex: number) => {\n      addFieldRow({\n        path,\n        rowIndex,\n        schemaPath,\n      })\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [addFieldRow, path, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'REMOVE_ROW', path, rowIndex })\n      setModified(true)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      dispatchFields({ type: 'MOVE_ROW', moveFromIndex, moveToIndex, path })\n      setModified(true)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = toggleAllRows({\n        collapsed,\n        rows: rowsData,\n      })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', path, updatedRows })\n    },\n    [dispatchFields, path, rowsData, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = extractRowsAndCollapsedIDs({\n        collapsed,\n        rowID,\n        rows: rowsData,\n      })\n\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rowsData, setDocFieldPreferences],\n  )\n\n  const hasMaxRows = maxRows && rowsData.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && errorPaths.length > 0\n\n  const showRequired = (readOnly || disabled) && rowsData.length === 0\n  const showMinRows = rowsData.length < minRows || (required && rowsData.length === 0)\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n    >\n      {showError && (\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      )}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__header-content`}>\n            <h3 className={`${baseClass}__title`}>\n              <RenderCustomComponent\n                CustomComponent={Label}\n                Fallback={\n                  <FieldLabel\n                    as=\"span\"\n                    label={label}\n                    localized={localized}\n                    path={path}\n                    required={required}\n                  />\n                }\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          {rowsData?.length > 0 && (\n            <ul className={`${baseClass}__header-actions`}>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(true)}\n                  type=\"button\"\n                >\n                  {t('fields:collapseAll')}\n                </button>\n              </li>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(false)}\n                  type=\"button\"\n                >\n                  {t('fields:showAll')}\n                </button>\n              </li>\n            </ul>\n          )}\n        </div>\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </header>\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {BeforeInput}\n      {(rowsData?.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__draggable-rows`}\n          ids={rowsData.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rowsData.map((rowData, i) => {\n            const { id: rowID, isLoading } = rowData\n\n            const rowPath = `${path}.${i}`\n\n            const rowErrorCount = errorPaths?.filter((errorPath) =>\n              errorPath.startsWith(rowPath + '.'),\n            ).length\n\n            return (\n              <DraggableSortableItem\n                disabled={readOnly || disabled || !isSortable}\n                id={rowID}\n                key={rowID}\n              >\n                {(draggableSortableItemProps) => (\n                  <ArrayRow\n                    {...draggableSortableItemProps}\n                    addRow={addRow}\n                    CustomRowLabel={RowLabels?.[i]}\n                    duplicateRow={duplicateRow}\n                    errorCount={rowErrorCount}\n                    fields={fields}\n                    forceRender={forceRender}\n                    hasMaxRows={hasMaxRows}\n                    isLoading={isLoading}\n                    isSortable={isSortable}\n                    labels={labels}\n                    moveRow={moveRow}\n                    parentPath={path}\n                    path={rowPath}\n                    permissions={permissions}\n                    readOnly={readOnly || disabled}\n                    removeRow={removeRow}\n                    row={rowData}\n                    rowCount={rowsData?.length}\n                    rowIndex={i}\n                    schemaPath={schemaPath}\n                    setCollapse={setCollapse}\n                  />\n                )}\n              </DraggableSortableItem>\n            )\n          })}\n          {!valid && (\n            <React.Fragment>\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:rows' : 'general:row'),\n                  })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!hasMaxRows && !readOnly && (\n        <Button\n          buttonStyle=\"icon-label\"\n          className={`${baseClass}__add-row`}\n          icon=\"plus\"\n          iconPosition=\"left\"\n          iconStyle=\"with-border\"\n          onClick={() => {\n            void addRow(value || 0)\n          }}\n        >\n          {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n        </Button>\n      )}\n      {AfterInput}\n    </div>\n  )\n}\n\nexport const ArrayField = withCondition(ArrayFieldComponent)\n"],"mappings":"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","ignoreList":[]}