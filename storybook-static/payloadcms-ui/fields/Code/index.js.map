{"version":3,"file":"index.js","names":["React","useCallback","useMemo","CodeEditor","RenderCustomComponent","FieldDescription","FieldError","FieldLabel","useField","withCondition","mergeFieldStyles","fieldBaseClass","prismToMonacoLanguageMap","js","ts","baseClass","CodeFieldComponent","props","field","admin","className","description","editorOptions","language","label","localized","required","onMount","path","readOnly","validate","memoizedValidate","value","options","customComponents","AfterInput","BeforeInput","Description","Error","Label","disabled","setValue","showError","styles","_jsxs","filter","Boolean","join","style","_jsx","CustomComponent","Fallback","defaultLanguage","onChange","val","CodeField"],"sources":["../../../src/fields/Code/index.tsx"],"sourcesContent":["'use client'\nimport type { CodeFieldClientComponent } from 'payload'\n\nimport React, { useCallback, useMemo } from 'react'\n\nimport { CodeEditor } from '../../elements/CodeEditor/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { FieldDescription } from '../../fields/FieldDescription/index.js'\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { mergeFieldStyles } from '../mergeFieldStyles.js'\nimport './index.scss'\nimport { fieldBaseClass } from '../shared/index.js'\n\nconst prismToMonacoLanguageMap = {\n  js: 'javascript',\n  ts: 'typescript',\n}\n\nconst baseClass = 'code-field'\n\nconst CodeFieldComponent: CodeFieldClientComponent = (props) => {\n  const {\n    field,\n    field: {\n      admin: { className, description, editorOptions = {}, language = 'javascript' } = {},\n      label,\n      localized,\n      required,\n    },\n    onMount,\n    path,\n    readOnly,\n    validate,\n  } = props\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, required })\n      }\n    },\n    [validate, required],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label } = {},\n    disabled,\n    setValue,\n    showError,\n    value,\n  } = useField({\n    path,\n    validate: memoizedValidate,\n  })\n\n  const styles = useMemo(() => mergeFieldStyles(field), [field])\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        showError && 'error',\n        (readOnly || disabled) && 'read-only',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      style={styles}\n    >\n      <RenderCustomComponent\n        CustomComponent={Label}\n        Fallback={\n          <FieldLabel label={label} localized={localized} path={path} required={required} />\n        }\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n        {BeforeInput}\n        <CodeEditor\n          defaultLanguage={prismToMonacoLanguageMap[language] || language}\n          onChange={readOnly || disabled ? () => null : (val) => setValue(val)}\n          onMount={onMount}\n          options={editorOptions}\n          readOnly={readOnly || disabled}\n          value={(value as string) || ''}\n        />\n        {AfterInput}\n      </div>\n      <RenderCustomComponent\n        CustomComponent={Description}\n        Fallback={<FieldDescription description={description} path={path} />}\n      />\n    </div>\n  )\n}\n\nexport const CodeField = withCondition(CodeFieldComponent)\n"],"mappings":"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","ignoreList":[]}