{"version":3,"file":"index.js","names":["React","useCallback","useEffect","useMemo","useState","useField","withCondition","useConfig","useLocale","mergeFieldStyles","isFieldRTL","TextInput","TextFieldComponent","props","field","admin","className","description","placeholder","rtl","hasMany","label","localized","maxLength","maxRows","minLength","minRows","required","inputRef","path","readOnly","validate","locale","config","localization","localizationConfig","memoizedValidate","value","options","customComponents","AfterInput","BeforeInput","Description","Error","Label","disabled","setValue","showError","renderRTL","fieldLocalized","fieldRTL","undefined","valueToRender","setValueToRender","handleHasManyChange","selectedOption","newValue","Array","isArray","map","option","val","index","id","toString","styles","_jsx","onChange","e","target","style","TextField"],"sources":["../../../src/fields/Text/index.tsx"],"sourcesContent":["'use client'\nimport type { TextFieldClientComponent } from 'payload'\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport type { Option } from '../../elements/ReactSelect/types.js'\nimport type { TextInputProps } from './types.js'\n\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { mergeFieldStyles } from '../mergeFieldStyles.js'\nimport { isFieldRTL } from '../shared/index.js'\nimport { TextInput } from './Input.js'\nimport './index.scss'\n\nexport { TextInput, TextInputProps }\n\nconst TextFieldComponent: TextFieldClientComponent = (props) => {\n  const {\n    field,\n    field: {\n      admin: { className, description, placeholder, rtl } = {},\n      hasMany,\n      label,\n      localized,\n      maxLength,\n      maxRows,\n      minLength,\n      minRows,\n      required,\n    },\n    inputRef,\n    path,\n    readOnly,\n    validate,\n  } = props\n\n  const locale = useLocale()\n\n  const {\n    config: { localization: localizationConfig },\n  } = useConfig()\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxLength, minLength, required })\n      }\n    },\n    [validate, minLength, maxLength, required],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label } = {},\n    disabled,\n    setValue,\n    showError,\n    value,\n  } = useField({\n    path,\n    validate: memoizedValidate,\n  })\n\n  const renderRTL = isFieldRTL({\n    fieldLocalized: localized,\n    fieldRTL: rtl,\n    locale,\n    localizationConfig: localizationConfig || undefined,\n  })\n\n  const [valueToRender, setValueToRender] = useState<\n    { id: string; label: string; value: { value: number } }[]\n  >([]) // Only for hasMany\n\n  const handleHasManyChange = useCallback(\n    (selectedOption) => {\n      if (!(readOnly || disabled)) {\n        let newValue\n        if (!selectedOption) {\n          newValue = []\n        } else if (Array.isArray(selectedOption)) {\n          newValue = selectedOption.map((option) => option.value?.value || option.value)\n        } else {\n          newValue = [selectedOption.value?.value || selectedOption.value]\n        }\n\n        setValue(newValue)\n      }\n    },\n    [readOnly, setValue, disabled],\n  )\n\n  // useEffect update valueToRender:\n  useEffect(() => {\n    if (hasMany && Array.isArray(value)) {\n      setValueToRender(\n        value.map((val, index) => {\n          return {\n            id: `${val}${index}`, // append index to avoid duplicate keys but allow duplicate numbers\n            label: `${val}`,\n            value: {\n              // React-select automatically uses \"label-value\" as a key, so we will get that react duplicate key warning if we just pass in the value as multiple values can be the same. So we need to append the index to the toString() of the value to avoid that warning, as it uses that as the key.\n              toString: () => `${val}${index}`,\n              value: val?.value || val,\n            },\n          }\n        }),\n      )\n    }\n  }, [value, hasMany])\n\n  const styles = useMemo(() => mergeFieldStyles(field), [field])\n\n  return (\n    <TextInput\n      AfterInput={AfterInput}\n      BeforeInput={BeforeInput}\n      className={className}\n      Description={Description}\n      description={description}\n      Error={Error}\n      hasMany={hasMany}\n      inputRef={inputRef}\n      Label={Label}\n      label={label}\n      localized={localized}\n      maxRows={maxRows}\n      minRows={minRows}\n      onChange={\n        hasMany\n          ? handleHasManyChange\n          : (e) => {\n              setValue(e.target.value)\n            }\n      }\n      path={path}\n      placeholder={placeholder}\n      readOnly={readOnly || disabled}\n      required={required}\n      rtl={renderRTL}\n      showError={showError}\n      style={styles}\n      value={(value as string) || ''}\n      valueToRender={valueToRender as Option[]}\n    />\n  )\n}\n\nexport const TextField = withCondition(TextFieldComponent)\n"],"mappings":"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","ignoreList":[]}