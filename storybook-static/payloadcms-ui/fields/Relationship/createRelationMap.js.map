{"version":3,"file":"createRelationMap.js","names":["createRelationMap","hasMany","relationTo","value","hasMultipleRelations","Array","isArray","relationMap","reduce","map","current","add","relation","id","push","forEach","val"],"sources":["../../../src/fields/Relationship/createRelationMap.ts"],"sourcesContent":["'use client'\nimport type { Value } from './types.js'\n\ntype RelationMap = {\n  [relation: string]: (number | string)[]\n}\n\ntype CreateRelationMap = (args: {\n  hasMany: boolean\n  relationTo: string | string[]\n  value: null | Value | Value[] // really needs to be `ValueWithRelation`\n}) => RelationMap\n\nexport const createRelationMap: CreateRelationMap = ({ hasMany, relationTo, value }) => {\n  const hasMultipleRelations = Array.isArray(relationTo)\n  let relationMap: RelationMap\n  if (Array.isArray(relationTo)) {\n    relationMap = relationTo.reduce((map, current) => {\n      return { ...map, [current]: [] }\n    }, {})\n  } else {\n    relationMap = { [relationTo]: [] }\n  }\n\n  if (value === null) {\n    return relationMap\n  }\n\n  const add = (relation: string, id: unknown) => {\n    if ((typeof id === 'string' || typeof id === 'number') && typeof relation === 'string') {\n      if (relationMap[relation]) {\n        relationMap[relation].push(id)\n      } else {\n        relationMap[relation] = [id]\n      }\n    }\n  }\n\n  if (hasMany && Array.isArray(value)) {\n    value.forEach((val) => {\n      if (\n        hasMultipleRelations &&\n        typeof val === 'object' &&\n        'relationTo' in val &&\n        'value' in val\n      ) {\n        add(val.relationTo, val.value)\n      }\n\n      if (!hasMultipleRelations && typeof relationTo === 'string') {\n        add(relationTo, val)\n      }\n    })\n  } else if (hasMultipleRelations && Array.isArray(relationTo)) {\n    if (typeof value === 'object' && 'relationTo' in value && 'value' in value) {\n      add(value.relationTo, value.value)\n    }\n  } else {\n    add(relationTo, value)\n  }\n\n  return relationMap\n}\n"],"mappings":"AAAA;;AAaA,OAAO,MAAMA,iBAAA,GAAuCA,CAAC;EAAEC,OAAO;EAAEC,UAAU;EAAEC;AAAK,CAAE;EACjF,MAAMC,oBAAA,GAAuBC,KAAA,CAAMC,OAAO,CAACJ,UAAA;EAC3C,IAAIK,WAAA;EACJ,IAAIF,KAAA,CAAMC,OAAO,CAACJ,UAAA,GAAa;IAC7BK,WAAA,GAAcL,UAAA,CAAWM,MAAM,CAAC,CAACC,GAAA,EAAKC,OAAA;MACpC,OAAO;QAAE,GAAGD,GAAG;QAAE,CAACC,OAAA,GAAU;MAAG;IACjC,GAAG,CAAC;EACN,OAAO;IACLH,WAAA,GAAc;MAAE,CAACL,UAAA,GAAa;IAAG;EACnC;EAEA,IAAIC,KAAA,KAAU,MAAM;IAClB,OAAOI,WAAA;EACT;EAEA,MAAMI,GAAA,GAAMA,CAACC,QAAA,EAAkBC,EAAA;IAC7B,IAAI,CAAC,OAAOA,EAAA,KAAO,YAAY,OAAOA,EAAA,KAAO,QAAO,KAAM,OAAOD,QAAA,KAAa,UAAU;MACtF,IAAIL,WAAW,CAACK,QAAA,CAAS,EAAE;QACzBL,WAAW,CAACK,QAAA,CAAS,CAACE,IAAI,CAACD,EAAA;MAC7B,OAAO;QACLN,WAAW,CAACK,QAAA,CAAS,GAAG,CAACC,EAAA,CAAG;MAC9B;IACF;EACF;EAEA,IAAIZ,OAAA,IAAWI,KAAA,CAAMC,OAAO,CAACH,KAAA,GAAQ;IACnCA,KAAA,CAAMY,OAAO,CAAEC,GAAA;MACb,IACEZ,oBAAA,IACA,OAAOY,GAAA,KAAQ,YACf,gBAAgBA,GAAA,IAChB,WAAWA,GAAA,EACX;QACAL,GAAA,CAAIK,GAAA,CAAId,UAAU,EAAEc,GAAA,CAAIb,KAAK;MAC/B;MAEA,IAAI,CAACC,oBAAA,IAAwB,OAAOF,UAAA,KAAe,UAAU;QAC3DS,GAAA,CAAIT,UAAA,EAAYc,GAAA;MAClB;IACF;EACF,OAAO,IAAIZ,oBAAA,IAAwBC,KAAA,CAAMC,OAAO,CAACJ,UAAA,GAAa;IAC5D,IAAI,OAAOC,KAAA,KAAU,YAAY,gBAAgBA,KAAA,IAAS,WAAWA,KAAA,EAAO;MAC1EQ,GAAA,CAAIR,KAAA,CAAMD,UAAU,EAAEC,KAAA,CAAMA,KAAK;IACnC;EACF,OAAO;IACLQ,GAAA,CAAIT,UAAA,EAAYC,KAAA;EAClB;EAEA,OAAOI,WAAA;AACT","ignoreList":[]}