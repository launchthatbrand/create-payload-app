{"version":3,"file":"schedulePublishHandler.js","names":["schedulePublishHandler","type","date","deleteID","doc","global","locale","req","timezone","i18n","payload","user","incomingUserSlug","collection","adminUserSlug","config","admin","Error","adminAccessFunction","collections","access","canAccessAdmin","delete","where","id","equals","jobs","queue","input","task","waitUntil","err","error","value","relationTo","logger","message","t"],"sources":["../../src/utilities/schedulePublishHandler.ts"],"sourcesContent":["import type { PayloadRequest, SchedulePublishTaskInput } from 'payload'\n\nexport type SchedulePublishHandlerArgs = {\n  date?: Date\n  /**\n   * The job id to delete to remove a scheduled publish event\n   */\n  deleteID?: number | string\n  req: PayloadRequest\n  timezone?: string\n} & SchedulePublishTaskInput\n\nexport const schedulePublishHandler = async ({\n  type,\n  date,\n  deleteID,\n  doc,\n  global,\n  locale,\n  req,\n  timezone,\n}: SchedulePublishHandlerArgs) => {\n  const { i18n, payload, user } = req\n\n  const incomingUserSlug = user?.collection\n\n  const adminUserSlug = payload.config.admin.user\n\n  if (!incomingUserSlug) {\n    throw new Error('Unauthorized')\n  }\n\n  const adminAccessFunction = payload.collections[incomingUserSlug].config.access?.admin\n\n  // Run the admin access function from the config if it exists\n  if (adminAccessFunction) {\n    const canAccessAdmin = await adminAccessFunction({ req })\n\n    if (!canAccessAdmin) {\n      throw new Error('Unauthorized')\n    }\n    // Match the user collection to the global admin config\n  } else if (adminUserSlug !== incomingUserSlug) {\n    throw new Error('Unauthorized')\n  }\n\n  try {\n    if (deleteID) {\n      await payload.delete({\n        collection: 'payload-jobs',\n        req,\n        where: { id: { equals: deleteID } },\n      })\n    }\n\n    await payload.jobs.queue({\n      input: {\n        type,\n        doc,\n        global,\n        locale,\n        timezone,\n        user: user.id,\n      },\n      task: 'schedulePublish',\n      waitUntil: date,\n    })\n  } catch (err) {\n    let error\n\n    if (deleteID) {\n      error = `Error deleting scheduled publish event with ID ${deleteID}`\n    } else {\n      error = `Error scheduling ${type} for `\n      if (doc) {\n        error += `document with ID ${doc.value} in collection ${doc.relationTo}`\n      }\n    }\n\n    payload.logger.error(error)\n    payload.logger.error(err)\n\n    return {\n      error,\n    }\n  }\n\n  return { message: i18n.t('general:success') }\n}\n"],"mappings":"AAYA,OAAO,MAAMA,sBAAA,GAAyB,MAAAA,CAAO;EAC3CC,IAAI;EACJC,IAAI;EACJC,QAAQ;EACRC,GAAG;EACHC,MAAM;EACNC,MAAM;EACNC,GAAG;EACHC;AAAQ,CACmB;EAC3B,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAI,CAAE,GAAGJ,GAAA;EAEhC,MAAMK,gBAAA,GAAmBD,IAAA,EAAME,UAAA;EAE/B,MAAMC,aAAA,GAAgBJ,OAAA,CAAQK,MAAM,CAACC,KAAK,CAACL,IAAI;EAE/C,IAAI,CAACC,gBAAA,EAAkB;IACrB,MAAM,IAAIK,KAAA,CAAM;EAClB;EAEA,MAAMC,mBAAA,GAAsBR,OAAA,CAAQS,WAAW,CAACP,gBAAA,CAAiB,CAACG,MAAM,CAACK,MAAM,EAAEJ,KAAA;EAEjF;EACA,IAAIE,mBAAA,EAAqB;IACvB,MAAMG,cAAA,GAAiB,MAAMH,mBAAA,CAAoB;MAAEX;IAAI;IAEvD,IAAI,CAACc,cAAA,EAAgB;MACnB,MAAM,IAAIJ,KAAA,CAAM;IAClB;IACA;EACF,OAAO,IAAIH,aAAA,KAAkBF,gBAAA,EAAkB;IAC7C,MAAM,IAAIK,KAAA,CAAM;EAClB;EAEA,IAAI;IACF,IAAId,QAAA,EAAU;MACZ,MAAMO,OAAA,CAAQY,MAAM,CAAC;QACnBT,UAAA,EAAY;QACZN,GAAA;QACAgB,KAAA,EAAO;UAAEC,EAAA,EAAI;YAAEC,MAAA,EAAQtB;UAAS;QAAE;MACpC;IACF;IAEA,MAAMO,OAAA,CAAQgB,IAAI,CAACC,KAAK,CAAC;MACvBC,KAAA,EAAO;QACL3B,IAAA;QACAG,GAAA;QACAC,MAAA;QACAC,MAAA;QACAE,QAAA;QACAG,IAAA,EAAMA,IAAA,CAAKa;MACb;MACAK,IAAA,EAAM;MACNC,SAAA,EAAW5B;IACb;EACF,EAAE,OAAO6B,GAAA,EAAK;IACZ,IAAIC,KAAA;IAEJ,IAAI7B,QAAA,EAAU;MACZ6B,KAAA,GAAQ,kDAAkD7B,QAAA,EAAU;IACtE,OAAO;MACL6B,KAAA,GAAQ,oBAAoB/B,IAAA,OAAW;MACvC,IAAIG,GAAA,EAAK;QACP4B,KAAA,IAAS,oBAAoB5B,GAAA,CAAI6B,KAAK,kBAAkB7B,GAAA,CAAI8B,UAAU,EAAE;MAC1E;IACF;IAEAxB,OAAA,CAAQyB,MAAM,CAACH,KAAK,CAACA,KAAA;IACrBtB,OAAA,CAAQyB,MAAM,CAACH,KAAK,CAACD,GAAA;IAErB,OAAO;MACLC;IACF;EACF;EAEA,OAAO;IAAEI,OAAA,EAAS3B,IAAA,CAAK4B,CAAC,CAAC;EAAmB;AAC9C","ignoreList":[]}