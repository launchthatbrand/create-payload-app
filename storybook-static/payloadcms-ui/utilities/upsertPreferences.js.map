{"version":3,"file":"upsertPreferences.js","names":["dequal","cache","removeUndefined","getPreferences","key","payload","userID","userSlug","result","find","collection","depth","limit","pagination","where","and","equals","then","res","docs","upsertPreferences","customMerge","req","value","incomingValue","existingPrefs","user","id","newPrefs","create","data","disableTransaction","mergedPrefs","update"],"sources":["../../src/utilities/upsertPreferences.ts"],"sourcesContent":["import type { DefaultDocumentIDType, Payload, PayloadRequest } from 'payload'\n\nimport { dequal } from 'dequal/lite'\nimport { cache } from 'react'\n\nimport { removeUndefined } from './removeUndefined.js'\n\nexport const getPreferences = cache(\n  async <T>(\n    key: string,\n    payload: Payload,\n    userID: DefaultDocumentIDType,\n    userSlug: string,\n  ): Promise<{ id: DefaultDocumentIDType; value: T }> => {\n    const result = (await payload\n      .find({\n        collection: 'payload-preferences',\n        depth: 0,\n        limit: 1,\n        pagination: false,\n        where: {\n          and: [\n            {\n              key: {\n                equals: key,\n              },\n            },\n            {\n              'user.relationTo': {\n                equals: userSlug,\n              },\n            },\n            {\n              'user.value': {\n                equals: userID,\n              },\n            },\n          ],\n        },\n      })\n      .then((res) => res.docs?.[0])) as { id: DefaultDocumentIDType; value: T }\n\n    return result\n  },\n)\n\n/**\n * Will update the given preferences by key, creating a new record if it doesn't already exist, or merging existing preferences with the new value.\n * This is not possible to do with the existing `db.upsert` operation because it stores on the `value` key and does not perform a deep merge beyond the first level.\n * I.e. if you have a preferences record with a `value` key, `db.upsert` will overwrite the existing value. In the future if this supported we should use that instead.\n * @param req - The PayloadRequest object\n * @param key - The key of the preferences to update\n * @param value - The new value to merge with the existing preferences\n */\nexport const upsertPreferences = async <T extends Record<string, unknown> | string>({\n  customMerge,\n  key,\n  req,\n  value: incomingValue,\n}: {\n  key: string\n  req: PayloadRequest\n} & (\n  | {\n      customMerge: (existingValue: T) => T\n      value?: never\n    }\n  | {\n      customMerge?: never\n      value: T\n    }\n)): Promise<T> => {\n  const existingPrefs: { id?: DefaultDocumentIDType; value?: T } = req.user\n    ? await getPreferences<T>(key, req.payload, req.user.id, req.user.collection)\n    : {}\n\n  let newPrefs = existingPrefs?.value\n\n  if (!existingPrefs?.id) {\n    await req.payload.create({\n      collection: 'payload-preferences',\n      data: {\n        key,\n        user: {\n          collection: req.user.collection,\n          value: req.user.id,\n        },\n        value: incomingValue,\n      },\n      depth: 0,\n      disableTransaction: true,\n      user: req.user,\n    })\n  } else {\n    let mergedPrefs: T\n\n    if (typeof customMerge === 'function') {\n      mergedPrefs = customMerge(existingPrefs.value)\n    } else {\n      // Strings are valid JSON, i.e. `locale` saved as a string to the locale preferences\n      mergedPrefs =\n        typeof incomingValue === 'object'\n          ? ({\n              ...(typeof existingPrefs.value === 'object' ? existingPrefs?.value : {}), // Shallow merge existing prefs to acquire any missing keys from incoming value\n              ...removeUndefined(incomingValue || {}),\n            } as T)\n          : incomingValue\n    }\n\n    if (!dequal(mergedPrefs, existingPrefs.value)) {\n      newPrefs = await req.payload\n        .update({\n          id: existingPrefs.id,\n          collection: 'payload-preferences',\n          data: {\n            key,\n            user: {\n              collection: req.user.collection,\n              value: req.user.id,\n            },\n            value: mergedPrefs,\n          },\n          depth: 0,\n          disableTransaction: true,\n          user: req.user,\n        })\n        ?.then((res) => res.value)\n    }\n  }\n\n  return newPrefs\n}\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ;AACvB,SAASC,KAAK,QAAQ;AAEtB,SAASC,eAAe,QAAQ;AAEhC,OAAO,MAAMC,cAAA,GAAiBF,KAAA,CAC5B,OACEG,GAAA,EACAC,OAAA,EACAC,MAAA,EACAC,QAAA;EAEA,MAAMC,MAAA,GAAU,MAAMH,OAAA,CACnBI,IAAI,CAAC;IACJC,UAAA,EAAY;IACZC,KAAA,EAAO;IACPC,KAAA,EAAO;IACPC,UAAA,EAAY;IACZC,KAAA,EAAO;MACLC,GAAA,EAAK,CACH;QACEX,GAAA,EAAK;UACHY,MAAA,EAAQZ;QACV;MACF,GACA;QACE,mBAAmB;UACjBY,MAAA,EAAQT;QACV;MACF,GACA;QACE,cAAc;UACZS,MAAA,EAAQV;QACV;MACF;IAEJ;EACF,GACCW,IAAI,CAAEC,GAAA,IAAQA,GAAA,CAAIC,IAAI,GAAG,EAAE;EAE9B,OAAOX,MAAA;AACT;AAGF;;;;;;;;AAQA,OAAO,MAAMY,iBAAA,GAAoB,MAAAA,CAAmD;EAClFC,WAAW;EACXjB,GAAG;EACHkB,GAAG;EACHC,KAAA,EAAOC;AAAa,CAarB;EACC,MAAMC,aAAA,GAA2DH,GAAA,CAAII,IAAI,GACrE,MAAMvB,cAAA,CAAkBC,GAAA,EAAKkB,GAAA,CAAIjB,OAAO,EAAEiB,GAAA,CAAII,IAAI,CAACC,EAAE,EAAEL,GAAA,CAAII,IAAI,CAAChB,UAAU,IAC1E,CAAC;EAEL,IAAIkB,QAAA,GAAWH,aAAA,EAAeF,KAAA;EAE9B,IAAI,CAACE,aAAA,EAAeE,EAAA,EAAI;IACtB,MAAML,GAAA,CAAIjB,OAAO,CAACwB,MAAM,CAAC;MACvBnB,UAAA,EAAY;MACZoB,IAAA,EAAM;QACJ1B,GAAA;QACAsB,IAAA,EAAM;UACJhB,UAAA,EAAYY,GAAA,CAAII,IAAI,CAAChB,UAAU;UAC/Ba,KAAA,EAAOD,GAAA,CAAII,IAAI,CAACC;QAClB;QACAJ,KAAA,EAAOC;MACT;MACAb,KAAA,EAAO;MACPoB,kBAAA,EAAoB;MACpBL,IAAA,EAAMJ,GAAA,CAAII;IACZ;EACF,OAAO;IACL,IAAIM,WAAA;IAEJ,IAAI,OAAOX,WAAA,KAAgB,YAAY;MACrCW,WAAA,GAAcX,WAAA,CAAYI,aAAA,CAAcF,KAAK;IAC/C,OAAO;MACL;MACAS,WAAA,GACE,OAAOR,aAAA,KAAkB,WACpB;QACC,IAAI,OAAOC,aAAA,CAAcF,KAAK,KAAK,WAAWE,aAAA,EAAeF,KAAA,GAAQ,CAAC,CAAC;QACvE,GAAGrB,eAAA,CAAgBsB,aAAA,IAAiB,CAAC;MACvC,IACAA,aAAA;IACR;IAEA,IAAI,CAACxB,MAAA,CAAOgC,WAAA,EAAaP,aAAA,CAAcF,KAAK,GAAG;MAC7CK,QAAA,GAAW,MAAMN,GAAA,CAAIjB,OAAO,CACzB4B,MAAM,CAAC;QACNN,EAAA,EAAIF,aAAA,CAAcE,EAAE;QACpBjB,UAAA,EAAY;QACZoB,IAAA,EAAM;UACJ1B,GAAA;UACAsB,IAAA,EAAM;YACJhB,UAAA,EAAYY,GAAA,CAAII,IAAI,CAAChB,UAAU;YAC/Ba,KAAA,EAAOD,GAAA,CAAII,IAAI,CAACC;UAClB;UACAJ,KAAA,EAAOS;QACT;QACArB,KAAA,EAAO;QACPoB,kBAAA,EAAoB;QACpBL,IAAA,EAAMJ,GAAA,CAAII;MACZ,IACET,IAAA,CAAMC,GAAA,IAAQA,GAAA,CAAIK,KAAK;IAC7B;EACF;EAEA,OAAOK,QAAA;AACT","ignoreList":[]}