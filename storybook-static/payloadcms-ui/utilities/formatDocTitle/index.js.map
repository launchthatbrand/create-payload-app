{"version":3,"file":"index.js","names":["getTranslation","formatDate","formatLexicalDocTitle","isSerializedLexicalEditor","formatDocTitle","collectionConfig","data","dateFormat","dateFormatFromConfig","fallback","globalConfig","i18n","title","useAsTitle","admin","fieldConfig","fields","find","f","name","isDate","type","date","displayFormat","pattern","label","slug","root","children","t"],"sources":["../../../src/utilities/formatDocTitle/index.ts"],"sourcesContent":["import type { I18n } from '@payloadcms/translations'\nimport type {\n  ClientCollectionConfig,\n  ClientGlobalConfig,\n  SanitizedConfig,\n  TypeWithID,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\n\nimport { formatDate } from './formatDateTitle.js'\nimport { formatLexicalDocTitle, isSerializedLexicalEditor } from './formatLexicalDocTitle.js'\n\nexport const formatDocTitle = ({\n  collectionConfig,\n  data,\n  dateFormat: dateFormatFromConfig,\n  fallback,\n  globalConfig,\n  i18n,\n}: {\n  collectionConfig?: ClientCollectionConfig\n  data: TypeWithID\n  dateFormat: SanitizedConfig['admin']['dateFormat']\n  fallback?: object | string\n  globalConfig?: ClientGlobalConfig\n  i18n: I18n<any, any>\n}): string => {\n  let title: string\n\n  if (collectionConfig) {\n    const useAsTitle = collectionConfig?.admin?.useAsTitle\n\n    if (useAsTitle) {\n      title = data?.[useAsTitle] || title\n\n      if (title) {\n        const fieldConfig = collectionConfig.fields.find(\n          (f) => 'name' in f && f.name === useAsTitle,\n        )\n\n        const isDate = fieldConfig?.type === 'date'\n\n        if (isDate) {\n          const dateFormat =\n            ('date' in fieldConfig.admin && fieldConfig?.admin?.date?.displayFormat) ||\n            dateFormatFromConfig\n          title = formatDate({ date: title, i18n, pattern: dateFormat }) || title\n        }\n      }\n    }\n  }\n\n  if (globalConfig) {\n    title = getTranslation(globalConfig?.label, i18n) || globalConfig?.slug\n  }\n\n  // richtext lexical case. We convert the first child of root to plain text\n  if (isSerializedLexicalEditor(title)) {\n    title = formatLexicalDocTitle(title.root.children?.[0]?.children || [], '')\n  }\n  if (!title && isSerializedLexicalEditor(fallback)) {\n    title = formatLexicalDocTitle(fallback.root.children?.[0]?.children || [], '')\n  }\n\n  if (!title) {\n    title = typeof fallback === 'string' ? fallback : `[${i18n.t('general:untitled')}]`\n  }\n\n  return title\n}\n"],"mappings":"AAQA,SAASA,cAAc,QAAQ;AAE/B,SAASC,UAAU,QAAQ;AAC3B,SAASC,qBAAqB,EAAEC,yBAAyB,QAAQ;AAEjE,OAAO,MAAMC,cAAA,GAAiBA,CAAC;EAC7BC,gBAAgB;EAChBC,IAAI;EACJC,UAAA,EAAYC,oBAAoB;EAChCC,QAAQ;EACRC,YAAY;EACZC;AAAI,CAQL;EACC,IAAIC,KAAA;EAEJ,IAAIP,gBAAA,EAAkB;IACpB,MAAMQ,UAAA,GAAaR,gBAAA,EAAkBS,KAAA,EAAOD,UAAA;IAE5C,IAAIA,UAAA,EAAY;MACdD,KAAA,GAAQN,IAAA,GAAOO,UAAA,CAAW,IAAID,KAAA;MAE9B,IAAIA,KAAA,EAAO;QACT,MAAMG,WAAA,GAAcV,gBAAA,CAAiBW,MAAM,CAACC,IAAI,CAC7CC,CAAA,IAAM,UAAUA,CAAA,IAAKA,CAAA,CAAEC,IAAI,KAAKN,UAAA;QAGnC,MAAMO,MAAA,GAASL,WAAA,EAAaM,IAAA,KAAS;QAErC,IAAID,MAAA,EAAQ;UACV,MAAMb,UAAA,GACJ,MAAC,IAAUQ,WAAA,CAAYD,KAAK,IAAIC,WAAA,EAAaD,KAAA,EAAOQ,IAAA,EAAMC,aAAA,IAC1Df,oBAAA;UACFI,KAAA,GAAQX,UAAA,CAAW;YAAEqB,IAAA,EAAMV,KAAA;YAAOD,IAAA;YAAMa,OAAA,EAASjB;UAAW,MAAMK,KAAA;QACpE;MACF;IACF;EACF;EAEA,IAAIF,YAAA,EAAc;IAChBE,KAAA,GAAQZ,cAAA,CAAeU,YAAA,EAAce,KAAA,EAAOd,IAAA,KAASD,YAAA,EAAcgB,IAAA;EACrE;EAEA;EACA,IAAIvB,yBAAA,CAA0BS,KAAA,GAAQ;IACpCA,KAAA,GAAQV,qBAAA,CAAsBU,KAAA,CAAMe,IAAI,CAACC,QAAQ,GAAG,EAAE,EAAEA,QAAA,IAAY,EAAE,EAAE;EAC1E;EACA,IAAI,CAAChB,KAAA,IAAST,yBAAA,CAA0BM,QAAA,GAAW;IACjDG,KAAA,GAAQV,qBAAA,CAAsBO,QAAA,CAASkB,IAAI,CAACC,QAAQ,GAAG,EAAE,EAAEA,QAAA,IAAY,EAAE,EAAE;EAC7E;EAEA,IAAI,CAAChB,KAAA,EAAO;IACVA,KAAA,GAAQ,OAAOH,QAAA,KAAa,WAAWA,QAAA,GAAW,IAAIE,IAAA,CAAKkB,CAAC,CAAC,sBAAsB;EACrF;EAEA,OAAOjB,KAAA;AACT","ignoreList":[]}