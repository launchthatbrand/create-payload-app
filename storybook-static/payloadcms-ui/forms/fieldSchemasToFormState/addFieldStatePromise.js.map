{"version":3,"file":"addFieldStatePromise.js","names":["ObjectIdImport","getBlockSelect","deepCopyObjectSimple","fieldAffectsData","fieldHasSubFields","fieldIsHiddenOrDisabled","fieldIsID","fieldIsLocalized","getFieldPaths","tabHasName","resolveFilterOptions","iterateFields","ObjectId","default","addFieldStatePromise","args","id","addErrorPathToParent","addErrorPathToParentArg","anyParentLocalized","blockData","clientFieldSchemaMap","collectionSlug","data","field","fieldSchemaMap","filter","forceFullValue","fullData","includeSchema","indexPath","omitParents","operation","parentPath","parentPermissions","parentSchemaPath","passesCondition","path","preferences","previousFormState","renderAllFields","renderFieldFn","req","schemaPath","select","selectMode","skipConditionChecks","skipValidation","state","console","warn","requiresRender","fieldPermissions","fieldState","fieldSchema","name","hasPermission","read","access","siblingData","validate","validationResult","jsonError","type","JSON","parse","e","event","previousValue","initialValue","err","payload","logger","error","msg","errorPath","errorPaths","includes","push","valid","errorMessage","arrayValue","Array","isArray","arraySelect","promises","rows","reduce","acc","row","i","toHexString","idKey","value","fields","find","localized","parentIndexPath","parentPassesCondition","permissions","undefined","previousRows","collapsedRowIDsFromPrefs","collapsed","previousRow","prevRow","admin","initCollapsed","length","Promise","all","disableFormData","blocksValue","rowMetadata","blockTypeToMatch","blockType","block","blocks","blockReferences","slug","Error","blockSelect","blockSelectMode","blockField","fieldKey","blockNameKey","blockName","collapsedRowIDs","groupSelect","filterOptions","relationTo","relation","query","user","hasMany","relationshipValue","map","relationship","tabs","tab","tabIndex","isNamedTab","tabSelect","tabIndexPath","tabPath","tabSchemaPath","index","childPermissions","tabPermissions","pathSegments","split","tabPassesCondition","condition","fieldConfig","get","endsWith","formState","previousFieldState"],"sources":["../../../src/forms/fieldSchemasToFormState/addFieldStatePromise.ts"],"sourcesContent":["import type {\n  ClientFieldSchemaMap,\n  Data,\n  DocumentPreferences,\n  Field,\n  FieldSchemaMap,\n  FieldState,\n  FlattenedBlock,\n  FormState,\n  FormStateWithoutComponents,\n  PayloadRequest,\n  SanitizedFieldPermissions,\n  SanitizedFieldsPermissions,\n  SelectMode,\n  SelectType,\n  Validate,\n} from 'payload'\n\nimport ObjectIdImport from 'bson-objectid'\nimport { getBlockSelect } from 'payload'\nimport {\n  deepCopyObjectSimple,\n  fieldAffectsData,\n  fieldHasSubFields,\n  fieldIsHiddenOrDisabled,\n  fieldIsID,\n  fieldIsLocalized,\n  getFieldPaths,\n  tabHasName,\n} from 'payload/shared'\n\nimport type { RenderFieldMethod } from './types.js'\n\nimport { resolveFilterOptions } from '../../utilities/resolveFilterOptions.js'\nimport { iterateFields } from './iterateFields.js'\n\nconst ObjectId = (ObjectIdImport.default ||\n  ObjectIdImport) as unknown as typeof ObjectIdImport.default\n\nexport type AddFieldStatePromiseArgs = {\n  addErrorPathToParent: (fieldPath: string) => void\n  /**\n   * if all parents are localized, then the field is localized\n   */\n  anyParentLocalized?: boolean\n  /**\n   * Data of the nearest parent block, or undefined\n   */\n  blockData: Data | undefined\n  clientFieldSchemaMap?: ClientFieldSchemaMap\n  collectionSlug?: string\n  data: Data\n  field: Field\n  fieldIndex: number\n  fieldSchemaMap: FieldSchemaMap\n  /**\n   * You can use this to filter down to only `localized` fields that require translation (type: text, textarea, etc.). Another plugin might want to look for only `point` type fields to do some GIS function. With the filter function you can go in like a surgeon.\n   */\n  filter?: (args: AddFieldStatePromiseArgs) => boolean\n  /**\n   * Force the value of fields like arrays or blocks to be the full value instead of the length @default false\n   */\n  forceFullValue?: boolean\n  fullData: Data\n  id: number | string\n  /**\n   * Whether the field schema should be included in the state\n   */\n  includeSchema?: boolean\n  indexPath: string\n  /**\n   * Whether to omit parent fields in the state. @default false\n   */\n  omitParents?: boolean\n  operation: 'create' | 'update'\n  parentIndexPath: string\n  parentPath: string\n  parentPermissions: SanitizedFieldsPermissions\n  parentSchemaPath: string\n  passesCondition: boolean\n  path: string\n  preferences: DocumentPreferences\n  previousFormState: FormState\n  renderAllFields: boolean\n  renderFieldFn: RenderFieldMethod\n  /**\n   * Req is used for validation and defaultValue calculation. If you don't need validation,\n   * just create your own req and pass in the locale and the user\n   */\n  req: PayloadRequest\n  schemaPath: string\n  select?: SelectType\n  selectMode?: SelectMode\n  /**\n   * Whether to skip checking the field's condition. @default false\n   */\n  skipConditionChecks?: boolean\n  /**\n   * Whether to skip validating the field. @default false\n   */\n  skipValidation?: boolean\n  state: FormStateWithoutComponents\n}\n\n/**\n * Flattens the fields schema and fields data.\n * The output is the field path (e.g. array.0.name) mapped to a FormField object.\n */\nexport const addFieldStatePromise = async (args: AddFieldStatePromiseArgs): Promise<void> => {\n  const {\n    id,\n    addErrorPathToParent: addErrorPathToParentArg,\n    anyParentLocalized = false,\n    blockData,\n    clientFieldSchemaMap,\n    collectionSlug,\n    data,\n    field,\n    fieldSchemaMap,\n    filter,\n    forceFullValue = false,\n    fullData,\n    includeSchema = false,\n    indexPath,\n    omitParents = false,\n    operation,\n    parentPath,\n    parentPermissions,\n    parentSchemaPath,\n    passesCondition,\n    path,\n    preferences,\n    previousFormState,\n    renderAllFields,\n    renderFieldFn,\n    req,\n    schemaPath,\n    select,\n    selectMode,\n    skipConditionChecks = false,\n    skipValidation = false,\n    state,\n  } = args\n\n  if (!args.clientFieldSchemaMap && args.renderFieldFn) {\n    console.warn(\n      'clientFieldSchemaMap is not passed to addFieldStatePromise - this will reduce performance',\n    )\n  }\n\n  const requiresRender = renderAllFields || previousFormState?.[path]?.requiresRender\n\n  let fieldPermissions: SanitizedFieldPermissions = true\n\n  const fieldState: FieldState = {}\n\n  if (passesCondition === false) {\n    fieldState.passesCondition = false\n  }\n\n  if (includeSchema) {\n    fieldState.fieldSchema = field\n  }\n\n  if (fieldAffectsData(field) && !fieldIsHiddenOrDisabled(field)) {\n    fieldPermissions =\n      parentPermissions === true\n        ? parentPermissions\n        : deepCopyObjectSimple(parentPermissions?.[field.name])\n\n    let hasPermission: boolean =\n      fieldPermissions === true || deepCopyObjectSimple(fieldPermissions?.read)\n\n    if (typeof field?.access?.read === 'function') {\n      hasPermission = await field.access.read({\n        id,\n        blockData,\n        data: fullData,\n        req,\n        siblingData: data,\n      })\n    } else {\n      hasPermission = true\n    }\n\n    if (!hasPermission) {\n      return\n    }\n\n    const validate: Validate = field.validate\n\n    let validationResult: string | true = true\n\n    if (typeof validate === 'function' && !skipValidation && passesCondition) {\n      let jsonError\n\n      if (field.type === 'json' && typeof data[field.name] === 'string') {\n        try {\n          JSON.parse(data[field.name])\n        } catch (e) {\n          jsonError = e\n        }\n      }\n\n      try {\n        validationResult = await validate(data?.[field.name], {\n          ...field,\n          id,\n          blockData,\n          collectionSlug,\n          data: fullData,\n          event: 'onChange',\n          // @AlessioGr added `jsonError` in https://github.com/payloadcms/payload/commit/c7ea62a39473408c3ea912c4fbf73e11be4b538d\n          // @ts-expect-error-next-line\n          jsonError,\n          operation,\n          preferences,\n          previousValue: previousFormState?.[path]?.initialValue,\n          req,\n          siblingData: data,\n        })\n      } catch (err) {\n        validationResult = `Error validating field at path: ${path}`\n\n        req.payload.logger.error({\n          err,\n          msg: validationResult,\n        })\n      }\n    }\n\n    const addErrorPathToParent = (errorPath: string) => {\n      if (typeof addErrorPathToParentArg === 'function') {\n        addErrorPathToParentArg(errorPath)\n      }\n\n      if (!fieldState.errorPaths) {\n        fieldState.errorPaths = []\n      }\n\n      if (!fieldState.errorPaths.includes(errorPath)) {\n        fieldState.errorPaths.push(errorPath)\n        fieldState.valid = false\n      }\n    }\n\n    if (typeof validationResult === 'string') {\n      fieldState.errorMessage = validationResult\n      fieldState.valid = false\n      addErrorPathToParent(path)\n    }\n\n    switch (field.type) {\n      case 'array': {\n        const arrayValue = Array.isArray(data[field.name]) ? data[field.name] : []\n\n        const arraySelect = select?.[field.name]\n\n        const { promises, rows } = arrayValue.reduce(\n          (acc, row, i: number) => {\n            const parentPath = path + '.' + i\n            row.id = row?.id || new ObjectId().toHexString()\n\n            if (!omitParents && (!filter || filter(args))) {\n              const idKey = parentPath + '.id'\n\n              state[idKey] = {\n                initialValue: row.id,\n                value: row.id,\n              }\n\n              if (includeSchema) {\n                state[idKey].fieldSchema = field.fields.find((field) => fieldIsID(field))\n              }\n            }\n\n            acc.promises.push(\n              iterateFields({\n                id,\n                addErrorPathToParent,\n                anyParentLocalized: field.localized || anyParentLocalized,\n                blockData,\n                clientFieldSchemaMap,\n                collectionSlug,\n                data: row,\n                fields: field.fields,\n                fieldSchemaMap,\n                filter,\n                forceFullValue,\n                fullData,\n                includeSchema,\n                omitParents,\n                operation,\n                parentIndexPath: '',\n                parentPassesCondition: passesCondition,\n                parentPath,\n                parentSchemaPath: schemaPath,\n                permissions:\n                  fieldPermissions === true ? fieldPermissions : fieldPermissions?.fields || {},\n                preferences,\n                previousFormState,\n                renderAllFields: requiresRender,\n                renderFieldFn,\n                req,\n                select: typeof arraySelect === 'object' ? arraySelect : undefined,\n                selectMode,\n                skipConditionChecks,\n                skipValidation,\n                state,\n              }),\n            )\n\n            if (!acc.rows) {\n              acc.rows = []\n            }\n\n            acc.rows.push({\n              id: row.id,\n            })\n\n            const previousRows = previousFormState?.[path]?.rows || []\n            const collapsedRowIDsFromPrefs = preferences?.fields?.[path]?.collapsed\n\n            const collapsed = (() => {\n              // First, check if `previousFormState` has a matching row\n              const previousRow = previousRows.find((prevRow) => prevRow.id === row.id)\n              if (previousRow) {\n                return previousRow.collapsed ?? false\n              }\n\n              // If previousFormState is undefined, check preferences\n              if (collapsedRowIDsFromPrefs !== undefined) {\n                return collapsedRowIDsFromPrefs.includes(row.id) // Check if collapsed in preferences\n              }\n\n              // If neither exists, fallback to `field.admin.initCollapsed`\n              return field.admin.initCollapsed\n            })()\n\n            if (collapsed) {\n              acc.rows[acc.rows.length - 1].collapsed = collapsed\n            }\n\n            return acc\n          },\n          {\n            promises: [],\n            rows: undefined,\n          },\n        )\n\n        // Wait for all promises and update fields with the results\n        await Promise.all(promises)\n\n        if (rows) {\n          fieldState.rows = rows\n        }\n\n        // Unset requiresRender\n        // so it will be removed from form state\n        fieldState.requiresRender = false\n\n        // Add values to field state\n        if (data[field.name] !== null) {\n          fieldState.value = forceFullValue ? arrayValue : arrayValue.length\n          fieldState.initialValue = forceFullValue ? arrayValue : arrayValue.length\n\n          if (arrayValue.length > 0) {\n            fieldState.disableFormData = true\n          }\n        }\n\n        // Add field to state\n        if (!omitParents && (!filter || filter(args))) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      case 'blocks': {\n        const blocksValue = Array.isArray(data[field.name]) ? data[field.name] : []\n\n        const { promises, rowMetadata } = blocksValue.reduce(\n          (acc, row, i: number) => {\n            const blockTypeToMatch: string = row.blockType\n\n            const block =\n              req.payload.blocks[blockTypeToMatch] ??\n              ((field.blockReferences ?? field.blocks).find(\n                (blockType) => typeof blockType !== 'string' && blockType.slug === blockTypeToMatch,\n              ) as FlattenedBlock | undefined)\n\n            if (!block) {\n              throw new Error(\n                `Block with type \"${row.blockType}\" was found in block data, but no block with that type is defined in the config for field with schema path ${schemaPath}.`,\n              )\n            }\n\n            const { blockSelect, blockSelectMode } = getBlockSelect({\n              block,\n              select: select?.[field.name],\n              selectMode,\n            })\n\n            const parentPath = path + '.' + i\n\n            if (block) {\n              row.id = row?.id || new ObjectId().toHexString()\n\n              if (!omitParents && (!filter || filter(args))) {\n                // Handle block `id` field\n                const idKey = parentPath + '.id'\n\n                state[idKey] = {\n                  initialValue: row.id,\n                  value: row.id,\n                }\n\n                if (includeSchema) {\n                  state[idKey].fieldSchema = includeSchema\n                    ? block.fields.find((blockField) => fieldIsID(blockField))\n                    : undefined\n                }\n\n                // Handle `blockType` field\n                const fieldKey = parentPath + '.blockType'\n\n                state[fieldKey] = {\n                  initialValue: row.blockType,\n                  value: row.blockType,\n                }\n\n                if (includeSchema) {\n                  state[fieldKey].fieldSchema = block.fields.find(\n                    (blockField) => 'name' in blockField && blockField.name === 'blockType',\n                  )\n                }\n\n                // Handle `blockName` field\n                const blockNameKey = parentPath + '.blockName'\n\n                state[blockNameKey] = {}\n\n                if (row.blockName) {\n                  state[blockNameKey].initialValue = row.blockName\n                  state[blockNameKey].value = row.blockName\n                }\n\n                if (includeSchema) {\n                  state[blockNameKey].fieldSchema = block.fields.find(\n                    (blockField) => 'name' in blockField && blockField.name === 'blockName',\n                  )\n                }\n              }\n\n              acc.promises.push(\n                iterateFields({\n                  id,\n                  addErrorPathToParent,\n                  anyParentLocalized: field.localized || anyParentLocalized,\n                  blockData: row,\n                  clientFieldSchemaMap,\n                  collectionSlug,\n                  data: row,\n                  fields: block.fields,\n                  fieldSchemaMap,\n                  filter,\n                  forceFullValue,\n                  fullData,\n                  includeSchema,\n                  omitParents,\n                  operation,\n                  parentIndexPath: '',\n                  parentPassesCondition: passesCondition,\n                  parentPath,\n                  parentSchemaPath: schemaPath + '.' + block.slug,\n                  permissions:\n                    fieldPermissions === true\n                      ? fieldPermissions\n                      : parentPermissions?.[field.name]?.blocks?.[block.slug] === true\n                        ? true\n                        : parentPermissions?.[field.name]?.blocks?.[block.slug]?.fields || {},\n                  preferences,\n                  previousFormState,\n                  renderAllFields: requiresRender,\n                  renderFieldFn,\n                  req,\n                  select: typeof blockSelect === 'object' ? blockSelect : undefined,\n                  selectMode: blockSelectMode,\n                  skipConditionChecks,\n                  skipValidation,\n                  state,\n                }),\n              )\n\n              acc.rowMetadata.push({\n                id: row.id,\n                blockType: row.blockType,\n              })\n\n              const collapsedRowIDs = preferences?.fields?.[path]?.collapsed\n\n              const collapsed =\n                collapsedRowIDs === undefined\n                  ? field.admin.initCollapsed\n                  : collapsedRowIDs.includes(row.id)\n\n              if (collapsed) {\n                acc.rowMetadata[acc.rowMetadata.length - 1].collapsed = collapsed\n              }\n            }\n\n            return acc\n          },\n          {\n            promises: [],\n            rowMetadata: [],\n          },\n        )\n\n        await Promise.all(promises)\n\n        // Add values to field state\n        if (data[field.name] === null) {\n          fieldState.value = null\n          fieldState.initialValue = null\n        } else {\n          fieldState.value = forceFullValue ? blocksValue : blocksValue.length\n          fieldState.initialValue = forceFullValue ? blocksValue : blocksValue.length\n\n          if (blocksValue.length > 0) {\n            fieldState.disableFormData = true\n          }\n        }\n\n        fieldState.rows = rowMetadata\n\n        // Unset requiresRender\n        // so it will be removed from form state\n        fieldState.requiresRender = false\n\n        // Add field to state\n        if (!omitParents && (!filter || filter(args))) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      case 'group': {\n        if (!filter || filter(args)) {\n          fieldState.disableFormData = true\n          state[path] = fieldState\n        }\n\n        const groupSelect = select?.[field.name]\n\n        await iterateFields({\n          id,\n          addErrorPathToParent,\n          anyParentLocalized: field.localized || anyParentLocalized,\n          blockData,\n          clientFieldSchemaMap,\n          collectionSlug,\n          data: data?.[field.name] || {},\n          fields: field.fields,\n          fieldSchemaMap,\n          filter,\n          forceFullValue,\n          fullData,\n          includeSchema,\n          omitParents,\n          operation,\n          parentIndexPath: '',\n          parentPassesCondition: passesCondition,\n          parentPath: path,\n          parentSchemaPath: schemaPath,\n          permissions:\n            typeof fieldPermissions === 'boolean' ? fieldPermissions : fieldPermissions?.fields,\n          preferences,\n          previousFormState,\n          renderAllFields,\n          renderFieldFn,\n          req,\n          select: typeof groupSelect === 'object' ? groupSelect : undefined,\n          selectMode,\n          skipConditionChecks,\n          skipValidation,\n          state,\n        })\n\n        break\n      }\n      case 'relationship':\n      case 'upload': {\n        if (field.filterOptions) {\n          if (typeof field.filterOptions === 'object') {\n            if (typeof field.relationTo === 'string') {\n              fieldState.filterOptions = {\n                [field.relationTo]: field.filterOptions,\n              }\n            } else {\n              fieldState.filterOptions = field.relationTo.reduce((acc, relation) => {\n                acc[relation] = field.filterOptions\n                return acc\n              }, {})\n            }\n          }\n\n          if (typeof field.filterOptions === 'function') {\n            const query = await resolveFilterOptions(field.filterOptions, {\n              id,\n              blockData,\n              data: fullData,\n              relationTo: field.relationTo,\n              req,\n              siblingData: data,\n              user: req.user,\n            })\n\n            fieldState.filterOptions = query\n          }\n        }\n\n        if (field.hasMany) {\n          const relationshipValue = Array.isArray(data[field.name])\n            ? data[field.name].map((relationship) => {\n                if (Array.isArray(field.relationTo)) {\n                  return {\n                    relationTo: relationship.relationTo,\n                    value:\n                      relationship.value && typeof relationship.value === 'object'\n                        ? relationship.value?.id\n                        : relationship.value,\n                  }\n                }\n                if (typeof relationship === 'object' && relationship !== null) {\n                  return relationship.id\n                }\n                return relationship\n              })\n            : undefined\n\n          fieldState.value = relationshipValue\n          fieldState.initialValue = relationshipValue\n        } else if (Array.isArray(field.relationTo)) {\n          if (\n            data[field.name] &&\n            typeof data[field.name] === 'object' &&\n            'relationTo' in data[field.name] &&\n            'value' in data[field.name]\n          ) {\n            const value =\n              typeof data[field.name]?.value === 'object' &&\n              data[field.name]?.value &&\n              'id' in data[field.name].value\n                ? data[field.name].value.id\n                : data[field.name].value\n            const relationshipValue = {\n              relationTo: data[field.name]?.relationTo,\n              value,\n            }\n            fieldState.value = relationshipValue\n            fieldState.initialValue = relationshipValue\n          }\n        } else {\n          const relationshipValue =\n            data[field.name] && typeof data[field.name] === 'object' && 'id' in data[field.name]\n              ? data[field.name].id\n              : data[field.name]\n          fieldState.value = relationshipValue\n          fieldState.initialValue = relationshipValue\n        }\n\n        if (!filter || filter(args)) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      default: {\n        if (data[field.name] !== undefined) {\n          fieldState.value = data[field.name]\n          fieldState.initialValue = data[field.name]\n        }\n\n        // Add field to state\n        if (!filter || filter(args)) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n    }\n  } else if (fieldHasSubFields(field) && !fieldAffectsData(field)) {\n    // Handle field types that do not use names (row, etc)\n\n    if (!filter || filter(args)) {\n      state[path] = {\n        disableFormData: true,\n      }\n\n      if (passesCondition === false) {\n        state[path].passesCondition = false\n      }\n    }\n\n    await iterateFields({\n      id,\n      select,\n      selectMode,\n      // passthrough parent functionality\n      addErrorPathToParent: addErrorPathToParentArg,\n      anyParentLocalized: fieldIsLocalized(field) || anyParentLocalized,\n      blockData,\n      clientFieldSchemaMap,\n      collectionSlug,\n      data,\n      fields: field.fields,\n      fieldSchemaMap,\n      filter,\n      forceFullValue,\n      fullData,\n      includeSchema,\n      omitParents,\n      operation,\n      parentIndexPath: indexPath,\n      parentPassesCondition: passesCondition,\n      parentPath,\n      parentSchemaPath,\n      permissions: parentPermissions, // TODO: Verify this is correct\n      preferences,\n      previousFormState,\n      renderAllFields,\n      renderFieldFn,\n      req,\n      skipConditionChecks,\n      skipValidation,\n      state,\n    })\n  } else if (field.type === 'tabs') {\n    const promises = field.tabs.map((tab, tabIndex) => {\n      const isNamedTab = tabHasName(tab)\n      let tabSelect: SelectType | undefined\n\n      const {\n        indexPath: tabIndexPath,\n        path: tabPath,\n        schemaPath: tabSchemaPath,\n      } = getFieldPaths({\n        field: {\n          ...tab,\n          type: 'tab',\n        },\n        index: tabIndex,\n        parentIndexPath: indexPath,\n        parentPath,\n        parentSchemaPath,\n      })\n\n      let childPermissions: SanitizedFieldsPermissions = undefined\n\n      if (isNamedTab) {\n        if (parentPermissions === true) {\n          childPermissions = true\n        } else {\n          const tabPermissions = parentPermissions?.[tab.name]\n          if (tabPermissions === true) {\n            childPermissions = true\n          } else {\n            childPermissions = tabPermissions?.fields\n          }\n        }\n\n        if (typeof select?.[tab.name] === 'object') {\n          tabSelect = select?.[tab.name] as SelectType\n        }\n      } else {\n        childPermissions = parentPermissions\n        tabSelect = select\n      }\n\n      const pathSegments = path ? path.split('.') : []\n\n      // If passesCondition is false then this should always result to false\n      // If the tab has no admin.condition provided then fallback to passesCondition and let that decide the result\n      let tabPassesCondition = passesCondition\n\n      if (passesCondition && typeof tab.admin?.condition === 'function') {\n        tabPassesCondition = tab.admin.condition(fullData, data, {\n          blockData,\n          path: pathSegments,\n          user: req.user,\n        })\n      }\n\n      if (tab?.id) {\n        state[tab.id] = {\n          passesCondition: tabPassesCondition,\n        }\n      }\n\n      return iterateFields({\n        id,\n        addErrorPathToParent: addErrorPathToParentArg,\n        anyParentLocalized: tab.localized || anyParentLocalized,\n        blockData,\n        clientFieldSchemaMap,\n        collectionSlug,\n        data: isNamedTab ? data?.[tab.name] || {} : data,\n        fields: tab.fields,\n        fieldSchemaMap,\n        filter,\n        forceFullValue,\n        fullData,\n        includeSchema,\n        omitParents,\n        operation,\n        parentIndexPath: isNamedTab ? '' : tabIndexPath,\n        parentPassesCondition: tabPassesCondition,\n        parentPath: isNamedTab ? tabPath : parentPath,\n        parentSchemaPath: isNamedTab ? tabSchemaPath : parentSchemaPath,\n        permissions: childPermissions,\n        preferences,\n        previousFormState,\n        renderAllFields,\n        renderFieldFn,\n        req,\n        select: tabSelect,\n        selectMode,\n        skipConditionChecks,\n        skipValidation,\n        state,\n      })\n    })\n\n    await Promise.all(promises)\n  } else if (field.type === 'ui') {\n    if (!filter || filter(args)) {\n      state[path] = fieldState\n      state[path].disableFormData = true\n    }\n  }\n\n  if (requiresRender && renderFieldFn && !fieldIsHiddenOrDisabled(field)) {\n    const fieldState = state[path]\n\n    const fieldConfig = fieldSchemaMap.get(schemaPath)\n\n    if (!fieldConfig) {\n      if (schemaPath.endsWith('.blockType')) {\n        return\n      } else {\n        throw new Error(`Field config not found for ${schemaPath}`)\n      }\n    }\n\n    if (!fieldState) {\n      // Some fields (ie `Tab`) do not live in form state\n      // therefore we cannot attach customComponents to them\n      return\n    }\n\n    renderFieldFn({\n      id,\n      clientFieldSchemaMap,\n      collectionSlug,\n      data: fullData,\n      fieldConfig: fieldConfig as Field,\n      fieldSchemaMap,\n      fieldState,\n      formState: state,\n      indexPath,\n      operation,\n      parentPath,\n      parentSchemaPath,\n      path,\n      permissions: fieldPermissions,\n      preferences,\n      previousFieldState: previousFormState?.[path],\n      req,\n      schemaPath,\n      siblingData: data,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]}