{"version":3,"file":"index.js","names":["useRouter","useSearchParams","formatAdminURL","React","Fragment","useCallback","useEffect","useMemo","useRef","useState","DocumentControls","DocumentDrawerHeader","useDocumentDrawerContext","DocumentFields","DocumentLocked","DocumentTakeOver","LeaveWithoutSaving","Upload","Form","useAuth","useConfig","useDocumentEvents","useDocumentInfo","useEditDepth","OperationProvider","useRouteTransition","useServerFunctions","useUploadEdits","abortAndIgnore","handleAbortRef","handleBackToDashboard","handleGoBack","handleTakeOver","Auth","SetDocumentStepNav","SetDocumentTitle","baseClass","DefaultEditView","Description","PreviewButton","PublishButton","SaveButton","SaveDraftButton","CustomUpload","id","action","AfterDocument","AfterFields","apiURL","BeforeFields","collectionSlug","currentEditor","disableActions","disableCreate","disableLeaveWithoutSaving","docPermissions","documentIsLocked","getDocPermissions","getDocPreferences","globalSlug","hasPublishPermission","hasSavePermission","incrementVersionCount","initialState","isEditing","isInitializing","lastUpdateTime","redirectAfterCreate","redirectAfterDelete","redirectAfterDuplicate","savedDocumentData","setCurrentEditor","setDocumentIsLocked","unlockDocument","updateDocumentEditor","updateSavedDocumentData","clearDoc","drawerSlug","onDelete","onDuplicate","onSave","onSaveFromContext","isInDrawer","Boolean","refreshCookieAsync","user","config","admin","userSlug","routes","adminRoute","getEntityConfig","collectionConfig","globalConfig","depth","router","params","reportUpdate","resetUploadEdits","getFormState","startRouteTransition","abortOnChangeRef","abortOnSaveRef","locale","get","entitySlug","slug","operation","auth","undefined","upload","docConfig","lockDocumentsProp","lockDocuments","isLockingEnabled","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","autosaveEnabled","versions","drafts","autosave","preventLeaveWithoutSaving","isReadOnlyForIncomingUser","setIsReadOnlyForIncomingUser","showTakeOverModal","setShowTakeOverModal","editSessionStartTime","setEditSessionStartTime","Date","now","lockExpiryTime","isLockExpired","documentLockStateRef","hasShownLockedModal","isLocked","classes","push","schemaPathSegments","validateBeforeSubmit","setValidateBeforeSubmit","disableLocalStrategy","handleDocumentLocking","lockedState","previousOwnerID","current","lockedUserID","json","controller","document","doc","result","updatedAt","toISOString","redirectRoute","path","docPreferences","state","data","renderAllFields","returnLockStatus","schemaPath","join","signal","skipValidation","onChange","formState","prevFormState","submitted","currentTime","timeSinceLastUpdate","updateLastEdited","shouldUnlockDocument","some","window","location","pathname","includes","abortOnChange","abortOnSave","shouldShowDocumentLockedModal","_jsx","className","filter","_jsxs","disabled","disableValidationOnSubmit","isDocumentForm","method","onSuccess","isActive","onReadOnly","onTakeOver","pluralLabel","labels","plural","useAsTitle","fallback","toString","customComponents","onDrawerCreateNew","permissions","readOnlyForIncomingUser","email","loginWithUsername","readOnly","requirePassword","useAPIKey","username","verify","uploadConfig","fields"],"sources":["../../../src/views/Edit/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ClientUser, DocumentViewClientProps, FormState } from 'payload'\n\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport type { FormProps } from '../../forms/Form/index.js'\nimport type { LockedState } from '../../utilities/buildFormState.js'\n\nimport { DocumentControls } from '../../elements/DocumentControls/index.js'\nimport { DocumentDrawerHeader } from '../../elements/DocumentDrawer/DrawerHeader/index.js'\nimport { useDocumentDrawerContext } from '../../elements/DocumentDrawer/Provider.js'\nimport { DocumentFields } from '../../elements/DocumentFields/index.js'\nimport { DocumentLocked } from '../../elements/DocumentLocked/index.js'\nimport { DocumentTakeOver } from '../../elements/DocumentTakeOver/index.js'\nimport { LeaveWithoutSaving } from '../../elements/LeaveWithoutSaving/index.js'\nimport { Upload } from '../../elements/Upload/index.js'\nimport { Form } from '../../forms/Form/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentEvents } from '../../providers/DocumentEvents/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { OperationProvider } from '../../providers/Operation/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { useUploadEdits } from '../../providers/UploadEdits/index.js'\nimport { abortAndIgnore, handleAbortRef } from '../../utilities/abortAndIgnore.js'\nimport { handleBackToDashboard } from '../../utilities/handleBackToDashboard.js'\nimport { handleGoBack } from '../../utilities/handleGoBack.js'\nimport { handleTakeOver } from '../../utilities/handleTakeOver.js'\nimport { Auth } from './Auth/index.js'\nimport { SetDocumentStepNav } from './SetDocumentStepNav/index.js'\nimport { SetDocumentTitle } from './SetDocumentTitle/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-edit'\n\n// This component receives props only on _pages_\n// When rendered within a drawer, props are empty\n// This is solely to support custom edit views which get server-rendered\nexport function DefaultEditView({\n  Description,\n  PreviewButton,\n  PublishButton,\n  SaveButton,\n  SaveDraftButton,\n  Upload: CustomUpload,\n}: DocumentViewClientProps) {\n  const {\n    id,\n    action,\n    AfterDocument,\n    AfterFields,\n    apiURL,\n    BeforeFields,\n    collectionSlug,\n    currentEditor,\n    disableActions,\n    disableCreate,\n    disableLeaveWithoutSaving,\n    docPermissions,\n    documentIsLocked,\n    getDocPermissions,\n    getDocPreferences,\n    globalSlug,\n    hasPublishPermission,\n    hasSavePermission,\n    incrementVersionCount,\n    initialState,\n    isEditing,\n    isInitializing,\n    lastUpdateTime,\n    redirectAfterCreate,\n    redirectAfterDelete,\n    redirectAfterDuplicate,\n    savedDocumentData,\n    setCurrentEditor,\n    setDocumentIsLocked,\n    unlockDocument,\n    updateDocumentEditor,\n    updateSavedDocumentData,\n  } = useDocumentInfo()\n\n  const {\n    clearDoc,\n    drawerSlug,\n    onDelete,\n    onDuplicate,\n    onSave: onSaveFromContext,\n  } = useDocumentDrawerContext()\n\n  const isInDrawer = Boolean(drawerSlug)\n\n  const { refreshCookieAsync, user } = useAuth()\n\n  const {\n    config,\n    config: {\n      admin: { user: userSlug },\n      routes: { admin: adminRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n  const globalConfig = getEntityConfig({ globalSlug })\n\n  const depth = useEditDepth()\n\n  const router = useRouter()\n  const params = useSearchParams()\n  const { reportUpdate } = useDocumentEvents()\n  const { resetUploadEdits } = useUploadEdits()\n  const { getFormState } = useServerFunctions()\n  const { startRouteTransition } = useRouteTransition()\n\n  const abortOnChangeRef = useRef<AbortController>(null)\n  const abortOnSaveRef = useRef<AbortController>(null)\n\n  const locale = params.get('locale')\n\n  const entitySlug = collectionConfig?.slug || globalConfig?.slug\n\n  const operation = collectionSlug && !id ? 'create' : 'update'\n\n  const auth = collectionConfig ? collectionConfig.auth : undefined\n  const upload = collectionConfig ? collectionConfig.upload : undefined\n\n  const docConfig = collectionConfig || globalConfig\n\n  const lockDocumentsProp = docConfig?.lockDocuments !== undefined ? docConfig?.lockDocuments : true\n  const isLockingEnabled = lockDocumentsProp !== false\n\n  const lockDurationDefault = 300 // Default 5 minutes in seconds\n  const lockDuration =\n    typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n  const lockDurationInMilliseconds = lockDuration * 1000\n\n  const autosaveEnabled = Boolean(\n    (collectionConfig?.versions?.drafts && collectionConfig?.versions?.drafts?.autosave) ||\n      (globalConfig?.versions?.drafts && globalConfig?.versions?.drafts?.autosave),\n  )\n\n  const preventLeaveWithoutSaving =\n    typeof disableLeaveWithoutSaving !== 'undefined' ? !disableLeaveWithoutSaving : !autosaveEnabled\n\n  const [isReadOnlyForIncomingUser, setIsReadOnlyForIncomingUser] = useState(false)\n  const [showTakeOverModal, setShowTakeOverModal] = useState(false)\n\n  const [editSessionStartTime, setEditSessionStartTime] = useState(Date.now())\n\n  const lockExpiryTime = lastUpdateTime + lockDurationInMilliseconds\n\n  const isLockExpired = Date.now() > lockExpiryTime\n\n  const documentLockStateRef = useRef<{\n    hasShownLockedModal: boolean\n    isLocked: boolean\n    user: ClientUser | number | string\n  } | null>({\n    hasShownLockedModal: false,\n    isLocked: false,\n    user: null,\n  })\n\n  const classes = [baseClass, (id || globalSlug) && `${baseClass}--is-editing`]\n\n  if (globalSlug) {\n    classes.push(`global-edit--${globalSlug}`)\n  }\n\n  if (collectionSlug) {\n    classes.push(`collection-edit--${collectionSlug}`)\n  }\n\n  const schemaPathSegments = useMemo(() => [entitySlug], [entitySlug])\n\n  const [validateBeforeSubmit, setValidateBeforeSubmit] = useState(() => {\n    if (operation === 'create' && auth && !auth.disableLocalStrategy) {\n      return true\n    }\n\n    return false\n  })\n\n  const handleDocumentLocking = useCallback(\n    (lockedState: LockedState) => {\n      setDocumentIsLocked(true)\n      const previousOwnerID =\n        typeof documentLockStateRef.current?.user === 'object'\n          ? documentLockStateRef.current?.user?.id\n          : documentLockStateRef.current?.user\n\n      if (lockedState) {\n        const lockedUserID =\n          typeof lockedState.user === 'string' || typeof lockedState.user === 'number'\n            ? lockedState.user\n            : lockedState.user.id\n\n        if (!documentLockStateRef.current || lockedUserID !== previousOwnerID) {\n          if (previousOwnerID === user.id && lockedUserID !== user.id) {\n            setShowTakeOverModal(true)\n            documentLockStateRef.current.hasShownLockedModal = true\n          }\n\n          documentLockStateRef.current = {\n            hasShownLockedModal: documentLockStateRef.current?.hasShownLockedModal || false,\n            isLocked: true,\n            user: lockedState.user as ClientUser,\n          }\n          setCurrentEditor(lockedState.user as ClientUser)\n        }\n      }\n    },\n    [setCurrentEditor, setDocumentIsLocked, user?.id],\n  )\n\n  const onSave = useCallback(\n    async (json): Promise<FormState> => {\n      const controller = handleAbortRef(abortOnSaveRef)\n\n      const document = json?.doc || json?.result\n\n      reportUpdate({\n        id,\n        entitySlug,\n        updatedAt: document?.updatedAt || new Date().toISOString(),\n      })\n\n      // If we're editing the doc of the logged-in user,\n      // Refresh the cookie to get new permissions\n      if (user && collectionSlug === userSlug && id === user.id) {\n        void refreshCookieAsync()\n      }\n\n      incrementVersionCount()\n\n      if (typeof updateSavedDocumentData === 'function') {\n        void updateSavedDocumentData(document || {})\n      }\n\n      if (typeof onSaveFromContext === 'function') {\n        const operation = id ? 'update' : 'create'\n\n        void onSaveFromContext({\n          ...json,\n          operation,\n          updatedAt:\n            operation === 'update'\n              ? new Date().toISOString()\n              : document?.updatedAt || new Date().toISOString(),\n        })\n      }\n\n      if (!isEditing && depth < 2 && redirectAfterCreate !== false) {\n        // Redirect to the same locale if it's been set\n        const redirectRoute = formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionSlug}/${document?.id}${locale ? `?locale=${locale}` : ''}`,\n        })\n\n        startRouteTransition(() => router.push(redirectRoute))\n      } else {\n        resetUploadEdits()\n      }\n\n      await getDocPermissions(json)\n\n      if ((id || globalSlug) && !autosaveEnabled) {\n        const docPreferences = await getDocPreferences()\n\n        const { state } = await getFormState({\n          id,\n          collectionSlug,\n          data: document,\n          docPermissions,\n          docPreferences,\n          globalSlug,\n          operation,\n          renderAllFields: true,\n          returnLockStatus: false,\n          schemaPath: schemaPathSegments.join('.'),\n          signal: controller.signal,\n          skipValidation: true,\n        })\n\n        // Unlock the document after save\n        if (isLockingEnabled) {\n          setDocumentIsLocked(false)\n        }\n\n        abortOnSaveRef.current = null\n\n        return state\n      }\n    },\n    [\n      reportUpdate,\n      id,\n      entitySlug,\n      user,\n      collectionSlug,\n      userSlug,\n      incrementVersionCount,\n      updateSavedDocumentData,\n      onSaveFromContext,\n      isEditing,\n      depth,\n      getDocPermissions,\n      globalSlug,\n      autosaveEnabled,\n      refreshCookieAsync,\n      adminRoute,\n      locale,\n      router,\n      resetUploadEdits,\n      getDocPreferences,\n      getFormState,\n      docPermissions,\n      operation,\n      schemaPathSegments,\n      isLockingEnabled,\n      setDocumentIsLocked,\n      startRouteTransition,\n    ],\n  )\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState, submitted }) => {\n      const controller = handleAbortRef(abortOnChangeRef)\n\n      const currentTime = Date.now()\n      const timeSinceLastUpdate = currentTime - editSessionStartTime\n\n      const updateLastEdited = isLockingEnabled && timeSinceLastUpdate >= 10000 // 10 seconds\n\n      if (updateLastEdited) {\n        setEditSessionStartTime(currentTime)\n      }\n\n      const docPreferences = await getDocPreferences()\n\n      const { lockedState, state } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions,\n        docPreferences,\n        formState: prevFormState,\n        globalSlug,\n        operation,\n        skipValidation: !submitted,\n        // Performance optimization: Setting it to false ensure that only fields that have explicit requireRender set in the form state will be rendered (e.g. new array rows).\n        // We only want to render ALL fields on initial render, not in onChange.\n        renderAllFields: false,\n        returnLockStatus: isLockingEnabled,\n        schemaPath: schemaPathSegments.join('.'),\n        signal: controller.signal,\n        updateLastEdited,\n      })\n\n      if (isLockingEnabled) {\n        handleDocumentLocking(lockedState)\n      }\n\n      abortOnChangeRef.current = null\n\n      return state\n    },\n    [\n      id,\n      collectionSlug,\n      getDocPreferences,\n      getFormState,\n      globalSlug,\n      handleDocumentLocking,\n      isLockingEnabled,\n      operation,\n      schemaPathSegments,\n      docPermissions,\n      editSessionStartTime,\n    ],\n  )\n\n  // Clean up when the component unmounts or when the document is unlocked\n  useEffect(() => {\n    return () => {\n      if (isLockingEnabled && documentIsLocked && (id || globalSlug)) {\n        // Only retain the lock if the user is still viewing the document\n        const shouldUnlockDocument = !['preview', 'api', 'versions'].some((path) =>\n          window.location.pathname.includes(path),\n        )\n        if (shouldUnlockDocument) {\n          // Check if this user is still the current editor\n          if (\n            typeof documentLockStateRef.current?.user === 'object'\n              ? documentLockStateRef.current?.user?.id === user?.id\n              : documentLockStateRef.current?.user === user?.id\n          ) {\n            void unlockDocument(id, collectionSlug ?? globalSlug)\n            setDocumentIsLocked(false)\n            setCurrentEditor(null)\n          }\n        }\n      }\n\n      setShowTakeOverModal(false)\n    }\n  }, [\n    collectionSlug,\n    globalSlug,\n    id,\n    unlockDocument,\n    user,\n    setCurrentEditor,\n    isLockingEnabled,\n    documentIsLocked,\n    setDocumentIsLocked,\n  ])\n\n  useEffect(() => {\n    const abortOnChange = abortOnChangeRef.current\n    const abortOnSave = abortOnSaveRef.current\n\n    return () => {\n      abortAndIgnore(abortOnChange)\n      abortAndIgnore(abortOnSave)\n    }\n  }, [])\n\n  const shouldShowDocumentLockedModal =\n    documentIsLocked &&\n    currentEditor &&\n    (typeof currentEditor === 'object'\n      ? currentEditor.id !== user?.id\n      : currentEditor !== user?.id) &&\n    !isReadOnlyForIncomingUser &&\n    !showTakeOverModal &&\n    !documentLockStateRef.current?.hasShownLockedModal &&\n    !isLockExpired\n\n  return (\n    <main className={classes.filter(Boolean).join(' ')}>\n      <OperationProvider operation={operation}>\n        <Form\n          action={action}\n          className={`${baseClass}__form`}\n          disabled={isReadOnlyForIncomingUser || isInitializing || !hasSavePermission}\n          disableValidationOnSubmit={!validateBeforeSubmit}\n          initialState={!isInitializing && initialState}\n          isDocumentForm={true}\n          isInitializing={isInitializing}\n          method={id ? 'PATCH' : 'POST'}\n          onChange={[onChange]}\n          onSuccess={onSave}\n        >\n          {isInDrawer && <DocumentDrawerHeader drawerSlug={drawerSlug} />}\n          {isLockingEnabled && shouldShowDocumentLockedModal && !isReadOnlyForIncomingUser && (\n            <DocumentLocked\n              handleGoBack={() => handleGoBack({ adminRoute, collectionSlug, router })}\n              isActive={shouldShowDocumentLockedModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n              onTakeOver={() =>\n                handleTakeOver(\n                  id,\n                  collectionSlug,\n                  globalSlug,\n                  user,\n                  false,\n                  updateDocumentEditor,\n                  setCurrentEditor,\n                  documentLockStateRef,\n                  isLockingEnabled,\n                )\n              }\n              updatedAt={lastUpdateTime}\n              user={currentEditor}\n            />\n          )}\n          {isLockingEnabled && showTakeOverModal && (\n            <DocumentTakeOver\n              handleBackToDashboard={() => handleBackToDashboard({ adminRoute, router })}\n              isActive={showTakeOverModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n            />\n          )}\n          {!isReadOnlyForIncomingUser && preventLeaveWithoutSaving && <LeaveWithoutSaving />}\n          {!isInDrawer && (\n            <SetDocumentStepNav\n              collectionSlug={collectionConfig?.slug}\n              globalSlug={globalConfig?.slug}\n              id={id}\n              pluralLabel={collectionConfig?.labels?.plural}\n              useAsTitle={collectionConfig?.admin?.useAsTitle}\n            />\n          )}\n          <SetDocumentTitle\n            collectionConfig={collectionConfig}\n            config={config}\n            fallback={depth <= 1 ? id?.toString() : undefined}\n            globalConfig={globalConfig}\n          />\n          <DocumentControls\n            apiURL={apiURL}\n            customComponents={{\n              PreviewButton,\n              PublishButton,\n              SaveButton,\n              SaveDraftButton,\n            }}\n            data={savedDocumentData}\n            disableActions={disableActions}\n            disableCreate={disableCreate}\n            hasPublishPermission={hasPublishPermission}\n            hasSavePermission={hasSavePermission}\n            id={id}\n            isEditing={isEditing}\n            onDelete={onDelete}\n            onDrawerCreateNew={clearDoc}\n            onDuplicate={onDuplicate}\n            onSave={onSave}\n            onTakeOver={() =>\n              handleTakeOver(\n                id,\n                collectionSlug,\n                globalSlug,\n                user,\n                true,\n                updateDocumentEditor,\n                setCurrentEditor,\n                documentLockStateRef,\n                isLockingEnabled,\n                setIsReadOnlyForIncomingUser,\n              )\n            }\n            permissions={docPermissions}\n            readOnlyForIncomingUser={isReadOnlyForIncomingUser}\n            redirectAfterDelete={redirectAfterDelete}\n            redirectAfterDuplicate={redirectAfterDuplicate}\n            slug={collectionConfig?.slug || globalConfig?.slug}\n            user={currentEditor}\n          />\n          <DocumentFields\n            AfterFields={AfterFields}\n            BeforeFields={\n              BeforeFields || (\n                <Fragment>\n                  {auth && (\n                    <Auth\n                      className={`${baseClass}__auth`}\n                      collectionSlug={collectionConfig.slug}\n                      disableLocalStrategy={collectionConfig.auth?.disableLocalStrategy}\n                      email={savedDocumentData?.email}\n                      loginWithUsername={auth?.loginWithUsername}\n                      operation={operation}\n                      readOnly={!hasSavePermission}\n                      requirePassword={!id}\n                      setValidateBeforeSubmit={setValidateBeforeSubmit}\n                      useAPIKey={auth.useAPIKey}\n                      username={savedDocumentData?.username}\n                      verify={auth.verify}\n                    />\n                  )}\n                  {upload && (\n                    <React.Fragment>\n                      {CustomUpload || (\n                        <Upload\n                          collectionSlug={collectionConfig.slug}\n                          initialState={initialState}\n                          uploadConfig={upload}\n                        />\n                      )}\n                    </React.Fragment>\n                  )}\n                </Fragment>\n              )\n            }\n            Description={Description}\n            docPermissions={docPermissions}\n            fields={docConfig.fields}\n            readOnly={isReadOnlyForIncomingUser || !hasSavePermission}\n            schemaPathSegments={schemaPathSegments}\n          />\n          {AfterDocument}\n        </Form>\n      </OperationProvider>\n    </main>\n  )\n}\n"],"mappings":"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","ignoreList":[]}