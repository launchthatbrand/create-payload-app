{"version":3,"file":"index.js","names":["c","_c","getTranslation","useRouter","formatFilesize","isNumber","React","Fragment","useEffect","useState","useBulkUpload","Button","Gutter","ListControls","useListDrawerContext","ListSelection","useModal","Pagination","PerPage","RenderCustomComponent","SelectMany","useStepNav","RelationshipProvider","ViewDescription","useAuth","useConfig","useListQuery","SelectionProvider","TableColumnsProvider","useTranslation","useWindowInfo","ListHeader","baseClass","DefaultListView","props","$","AfterList","AfterListTable","beforeActions","BeforeList","BeforeListTable","collectionSlug","columnState","Description","disableBulkDelete","disableBulkEdit","disableQueryPresets","enableRowSelections","hasCreatePermission","hasCreatePermissionFromProps","listMenuItems","newDocumentURL","queryPreset","queryPresetPermissions","renderedFilters","resolvedFilterOptions","Table","InitialTable","setTable","allowCreate","createNewDrawerSlug","drawerSlug","listDrawerSlug","onBulkSelect","undefined","t0","t1","user","getEntityConfig","router","data","defaultLimit","initialLimit","handlePageChange","handlePerPageChange","query","openModal","setCollectionSlug","setCurrentActivePath","setOnSuccess","bulkUploadDrawerSlug","collectionConfig","labels","upload","isUploadCollection","Boolean","isBulkUploadEnabled","bulkUpload","isInDrawer","i18n","t","setStepNav","breakpoints","t2","s","smallBreak","t3","t4","docs","map","_temp","refresh","openBulkUpload","label","plural","t5","_jsx","onClick","children","className","_jsxs","totalDocs","CustomComponent","Fallback","description","admin","hideFileInputOnCreate","enableQueryPresets","length","el","singular","to","hasNextPage","hasPrevPage","limit","nextPage","numberOfNeighbors","onChange","page","prevPage","totalPages","handleChange","Number","limits","pagination","resetPage","pagingCounter","doc","filesize"],"sources":["../../../src/views/List/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ListViewClientProps } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatFilesize, isNumber } from 'payload/shared'\nimport React, { Fragment, useEffect, useState } from 'react'\n\nimport { useBulkUpload } from '../../elements/BulkUpload/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListControls } from '../../elements/ListControls/index.js'\nimport { useListDrawerContext } from '../../elements/ListDrawer/Provider.js'\nimport { ListSelection } from '../../elements/ListSelection/index.js'\nimport { useModal } from '../../elements/Modal/index.js'\nimport { Pagination } from '../../elements/Pagination/index.js'\nimport { PerPage } from '../../elements/PerPage/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { SelectMany } from '../../elements/SelectMany/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { RelationshipProvider } from '../../elements/Table/RelationshipProvider/index.js'\nimport { ViewDescription } from '../../elements/ViewDescription/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useListQuery } from '../../providers/ListQuery/index.js'\nimport { SelectionProvider } from '../../providers/Selection/index.js'\nimport { TableColumnsProvider } from '../../providers/TableColumns/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { ListHeader } from './ListHeader/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-list'\n\nexport function DefaultListView(props: ListViewClientProps) {\n  const {\n    AfterList,\n    AfterListTable,\n    beforeActions,\n    BeforeList,\n    BeforeListTable,\n    collectionSlug,\n    columnState,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    disableQueryPresets,\n    enableRowSelections,\n    hasCreatePermission: hasCreatePermissionFromProps,\n    listMenuItems,\n    newDocumentURL,\n    queryPreset,\n    queryPresetPermissions,\n    renderedFilters,\n    resolvedFilterOptions,\n    Table: InitialTable,\n  } = props\n\n  const [Table, setTable] = useState(InitialTable)\n\n  const {\n    allowCreate,\n    createNewDrawerSlug,\n    drawerSlug: listDrawerSlug,\n    onBulkSelect,\n  } = useListDrawerContext()\n\n  const hasCreatePermission =\n    allowCreate !== undefined\n      ? allowCreate && hasCreatePermissionFromProps\n      : hasCreatePermissionFromProps\n\n  useEffect(() => {\n    if (InitialTable) {\n      setTable(InitialTable)\n    }\n  }, [InitialTable])\n\n  const { user } = useAuth()\n\n  const { getEntityConfig } = useConfig()\n  const router = useRouter()\n\n  const {\n    data,\n    defaultLimit: initialLimit,\n    handlePageChange,\n    handlePerPageChange,\n    query,\n  } = useListQuery()\n\n  const { openModal } = useModal()\n  const { setCollectionSlug, setCurrentActivePath, setOnSuccess } = useBulkUpload()\n  const { drawerSlug: bulkUploadDrawerSlug } = useBulkUpload()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n\n  const { labels, upload } = collectionConfig\n\n  const isUploadCollection = Boolean(upload)\n\n  const isBulkUploadEnabled = isUploadCollection && collectionConfig.upload.bulkUpload\n\n  const isInDrawer = Boolean(listDrawerSlug)\n\n  const { i18n, t } = useTranslation()\n\n  const { setStepNav } = useStepNav()\n\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n\n  const docs = React.useMemo(() => {\n    if (isUploadCollection) {\n      return data.docs.map((doc) => {\n        return {\n          ...doc,\n          filesize: formatFilesize(doc.filesize),\n        }\n      })\n    } else {\n      return data.docs\n    }\n  }, [data.docs, isUploadCollection])\n\n  const openBulkUpload = React.useCallback(() => {\n    setCollectionSlug(collectionSlug)\n    setCurrentActivePath(collectionSlug)\n    openModal(bulkUploadDrawerSlug)\n    setOnSuccess(collectionSlug, () => router.refresh())\n  }, [\n    router,\n    collectionSlug,\n    bulkUploadDrawerSlug,\n    openModal,\n    setCollectionSlug,\n    setCurrentActivePath,\n    setOnSuccess,\n  ])\n\n  useEffect(() => {\n    if (!isInDrawer) {\n      setStepNav([\n        {\n          label: labels?.plural,\n        },\n      ])\n    }\n  }, [setStepNav, labels, isInDrawer])\n\n  return (\n    <Fragment>\n      <TableColumnsProvider collectionSlug={collectionSlug} columnState={columnState}>\n        <div className={`${baseClass} ${baseClass}--${collectionSlug}`}>\n          <SelectionProvider docs={docs} totalDocs={data.totalDocs} user={user}>\n            {BeforeList}\n            <Gutter className={`${baseClass}__wrap`}>\n              <ListHeader\n                collectionConfig={collectionConfig}\n                Description={\n                  <div className={`${baseClass}__sub-header`}>\n                    <RenderCustomComponent\n                      CustomComponent={Description}\n                      Fallback={\n                        <ViewDescription\n                          collectionSlug={collectionSlug}\n                          description={collectionConfig?.admin?.description}\n                        />\n                      }\n                    />\n                  </div>\n                }\n                disableBulkDelete={disableBulkDelete}\n                disableBulkEdit={disableBulkEdit}\n                hasCreatePermission={hasCreatePermission}\n                i18n={i18n}\n                isBulkUploadEnabled={isBulkUploadEnabled && !upload.hideFileInputOnCreate}\n                newDocumentURL={newDocumentURL}\n                openBulkUpload={openBulkUpload}\n                smallBreak={smallBreak}\n                t={t}\n              />\n              <ListControls\n                beforeActions={\n                  enableRowSelections && typeof onBulkSelect === 'function'\n                    ? beforeActions\n                      ? [...beforeActions, <SelectMany key=\"select-many\" onClick={onBulkSelect} />]\n                      : [<SelectMany key=\"select-many\" onClick={onBulkSelect} />]\n                    : beforeActions\n                }\n                collectionConfig={collectionConfig}\n                collectionSlug={collectionSlug}\n                disableQueryPresets={\n                  collectionConfig?.enableQueryPresets !== true || disableQueryPresets\n                }\n                listMenuItems={listMenuItems}\n                queryPreset={queryPreset}\n                queryPresetPermissions={queryPresetPermissions}\n                renderedFilters={renderedFilters}\n                resolvedFilterOptions={resolvedFilterOptions}\n              />\n              {BeforeListTable}\n              {docs.length > 0 && <RelationshipProvider>{Table}</RelationshipProvider>}\n              {docs.length === 0 && (\n                <div className={`${baseClass}__no-results`}>\n                  <p>\n                    {i18n.t('general:noResults', { label: getTranslation(labels?.plural, i18n) })}\n                  </p>\n                  {hasCreatePermission && newDocumentURL && (\n                    <Fragment>\n                      {isInDrawer ? (\n                        <Button el=\"button\" onClick={() => openModal(createNewDrawerSlug)}>\n                          {i18n.t('general:createNewLabel', {\n                            label: getTranslation(labels?.singular, i18n),\n                          })}\n                        </Button>\n                      ) : (\n                        <Button el=\"link\" to={newDocumentURL}>\n                          {i18n.t('general:createNewLabel', {\n                            label: getTranslation(labels?.singular, i18n),\n                          })}\n                        </Button>\n                      )}\n                    </Fragment>\n                  )}\n                </div>\n              )}\n              {AfterListTable}\n              {docs.length > 0 && (\n                <div className={`${baseClass}__page-controls`}>\n                  <Pagination\n                    hasNextPage={data.hasNextPage}\n                    hasPrevPage={data.hasPrevPage}\n                    limit={data.limit}\n                    nextPage={data.nextPage}\n                    numberOfNeighbors={1}\n                    onChange={(page) => void handlePageChange(page)}\n                    page={data.page}\n                    prevPage={data.prevPage}\n                    totalPages={data.totalPages}\n                  />\n                  {data.totalDocs > 0 && (\n                    <Fragment>\n                      <div className={`${baseClass}__page-info`}>\n                        {data.page * data.limit - (data.limit - 1)}-\n                        {data.totalPages > 1 && data.totalPages !== data.page\n                          ? data.limit * data.page\n                          : data.totalDocs}{' '}\n                        {i18n.t('general:of')} {data.totalDocs}\n                      </div>\n                      <PerPage\n                        handleChange={(limit) => void handlePerPageChange(limit)}\n                        limit={isNumber(query?.limit) ? Number(query.limit) : initialLimit}\n                        limits={collectionConfig?.admin?.pagination?.limits}\n                        resetPage={data.totalDocs <= data.pagingCounter}\n                      />\n                      {smallBreak && (\n                        <div className={`${baseClass}__list-selection`}>\n                          <ListSelection\n                            collectionConfig={collectionConfig}\n                            disableBulkDelete={disableBulkDelete}\n                            disableBulkEdit={disableBulkEdit}\n                            label={getTranslation(collectionConfig.labels.plural, i18n)}\n                          />\n                          <div className={`${baseClass}__list-selection-actions`}>\n                            {enableRowSelections && typeof onBulkSelect === 'function'\n                              ? beforeActions\n                                ? [\n                                    ...beforeActions,\n                                    <SelectMany key=\"select-many\" onClick={onBulkSelect} />,\n                                  ]\n                                : [<SelectMany key=\"select-many\" onClick={onBulkSelect} />]\n                              : beforeActions}\n                          </div>\n                        </div>\n                      )}\n                    </Fragment>\n                  )}\n                </div>\n              )}\n            </Gutter>\n            {AfterList}\n          </SelectionProvider>\n        </div>\n      </TableColumnsProvider>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}